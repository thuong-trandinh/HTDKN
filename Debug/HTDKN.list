
HTDKN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005d60  08005d60  00006d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d80  08005d80  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d80  08005d80  00006d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d88  08005d88  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d88  08005d88  00006d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005d90  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007790  20000010  08005da0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200077a0  08005da0  000077a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3bc  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229a  00000000  00000000  000163fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00018698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1f  00000000  00000000  000194c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b3a  00000000  00000000  00019fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001104a  00000000  00000000  00031b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a21e  00000000  00000000  00042b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcd89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  000dcdcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e0c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005d48 	.word	0x08005d48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005d48 	.word	0x08005d48

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <Calculate_CRC16>:


#include "Frame.h"


uint16_t Calculate_CRC16(uint8_t *data, uint16_t length) {
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000e60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e64:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	81bb      	strh	r3, [r7, #12]
 8000e6a:	e025      	b.n	8000eb8 <Calculate_CRC16+0x64>
        crc ^= (uint16_t)(data[i] << 8);  // Sử dụng data[i] cho rõ ràng
 8000e6c:	89bb      	ldrh	r3, [r7, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	89fb      	ldrh	r3, [r7, #14]
 8000e7a:	4053      	eors	r3, r2
 8000e7c:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	72fb      	strb	r3, [r7, #11]
 8000e82:	e013      	b.n	8000eac <Calculate_CRC16+0x58>
            if (crc & 0x8000)
 8000e84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da09      	bge.n	8000ea0 <Calculate_CRC16+0x4c>
                crc = (crc << 1) ^ 0x1021;
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000e96:	f083 0301 	eor.w	r3, r3, #1
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	81fb      	strh	r3, [r7, #14]
 8000e9e:	e002      	b.n	8000ea6 <Calculate_CRC16+0x52>
            else
                crc = crc << 1;
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000ea6:	7afb      	ldrb	r3, [r7, #11]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	72fb      	strb	r3, [r7, #11]
 8000eac:	7afb      	ldrb	r3, [r7, #11]
 8000eae:	2b07      	cmp	r3, #7
 8000eb0:	d9e8      	bls.n	8000e84 <Calculate_CRC16+0x30>
    for (uint16_t i = 0; i < length; i++) {
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	81bb      	strh	r3, [r7, #12]
 8000eb8:	89ba      	ldrh	r2, [r7, #12]
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d3d5      	bcc.n	8000e6c <Calculate_CRC16+0x18>
        }
    }
    return crc;
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <packframe>:

void packframe(uint8_t *outbuf, frame_t  *trans, uint8_t command){
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71fb      	strb	r3, [r7, #7]
	outbuf[0] = trans->start_bit;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	701a      	strb	r2, [r3, #0]
	trans->command = command;
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	79fa      	ldrb	r2, [r7, #7]
 8000ee8:	705a      	strb	r2, [r3, #1]
	outbuf[1] = trans->command;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	7852      	ldrb	r2, [r2, #1]
 8000ef2:	701a      	strb	r2, [r3, #0]
	outbuf[2] = (uint8_t)(trans->length >> 8)&0xFF; // MSB
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	885b      	ldrh	r3, [r3, #2]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3302      	adds	r3, #2
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
	outbuf[3] = (uint8_t)(trans->length & 0xFF);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	885a      	ldrh	r2, [r3, #2]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3303      	adds	r3, #3
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	701a      	strb	r2, [r3, #0]
	// Copy payload vào frame (nếu có)
	if ( trans->length > 0) {
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	885b      	ldrh	r3, [r3, #2]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <packframe+0x5c>
	    memcpy(&outbuf[4], trans->payload, trans->length);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1d18      	adds	r0, r3, #4
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1d19      	adds	r1, r3, #4
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	885b      	ldrh	r3, [r3, #2]
 8000f24:	461a      	mov	r2, r3
 8000f26:	f004 fe85 	bl	8005c34 <memcpy>
	}
	trans->CRC_16 = Calculate_CRC16(&outbuf[1],trans->length + 3); // temp ktr xiu nua xoa
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	885b      	ldrh	r3, [r3, #2]
 8000f32:	3303      	adds	r3, #3
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	4610      	mov	r0, r2
 8000f3a:	f7ff ff8b 	bl	8000e54 <Calculate_CRC16>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f48:	f8a3 238c 	strh.w	r2, [r3, #908]	@ 0x38c
	outbuf[trans->length + 4] = ((trans->CRC_16)>>8)&0xFF;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f52:	f8b3 338c 	ldrh.w	r3, [r3, #908]	@ 0x38c
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	885b      	ldrh	r3, [r3, #2]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	b2ca      	uxtb	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
	outbuf[trans->length + 5] = trans->CRC_16&0xFF;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f6e:	f8b3 138c 	ldrh.w	r1, [r3, #908]	@ 0x38c
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	885b      	ldrh	r3, [r3, #2]
 8000f76:	3305      	adds	r3, #5
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
	outbuf[6 + trans->length] = trans->end;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	885b      	ldrh	r3, [r3, #2]
 8000f84:	3306      	adds	r3, #6
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000f92:	f892 238e 	ldrb.w	r2, [r2, #910]	@ 0x38e
 8000f96:	701a      	strb	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <FloatToBytes>:
void FloatToBytes(float value, uint8_t *out) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000faa:	6038      	str	r0, [r7, #0]
    uint32_t asInt;
    /* Copy bit-pattern of float into 32-bit integer */
    value = value*3.30/4095;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa76 	bl	80004a0 <__aeabi_f2d>
 8000fb4:	a318      	add	r3, pc, #96	@ (adr r3, 8001018 <FloatToBytes+0x78>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	f7ff fac9 	bl	8000550 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	a316      	add	r3, pc, #88	@ (adr r3, 8001020 <FloatToBytes+0x80>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff fbea 	bl	80007a4 <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fd74 	bl	8000ac4 <__aeabi_d2f>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	607b      	str	r3, [r7, #4]
    memcpy(&asInt, &value, sizeof(asInt));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60fb      	str	r3, [r7, #12]
    /* Extract bytes in big-endian order (MSB first) */
    out[0] = (uint8_t)((asInt >> 24) & 0xFF);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	0e1b      	lsrs	r3, r3, #24
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	701a      	strb	r2, [r3, #0]
    out[1] = (uint8_t)((asInt >> 16) & 0xFF);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	0c1a      	lsrs	r2, r3, #16
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	701a      	strb	r2, [r3, #0]
    out[2] = (uint8_t)((asInt >> 8) & 0xFF);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	0a1a      	lsrs	r2, r3, #8
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3302      	adds	r3, #2
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
    out[3] = (uint8_t)(asInt & 0xFF);
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	3303      	adds	r3, #3
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	701a      	strb	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	66666666 	.word	0x66666666
 800101c:	400a6666 	.word	0x400a6666
 8001020:	00000000 	.word	0x00000000
 8001024:	40affe00 	.word	0x40affe00

08001028 <Decode_frame>:
void Decode_frame(uint8_t *outbuf, frame_t *trans){
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	trans->start_bit = outbuf[0];
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	701a      	strb	r2, [r3, #0]
	trans->command = outbuf[1];
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	785a      	ldrb	r2, [r3, #1]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	705a      	strb	r2, [r3, #1]
	trans->length = (outbuf[2]<<8)|outbuf[3];
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3302      	adds	r3, #2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3303      	adds	r3, #3
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21b      	sxth	r3, r3
 8001058:	b29a      	uxth	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	805a      	strh	r2, [r3, #2]
	trans->CRC_16 = (outbuf[4 + trans->length]<<8)|outbuf[5 + trans->length];
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	885b      	ldrh	r3, [r3, #2]
 8001062:	3304      	adds	r3, #4
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	885b      	ldrh	r3, [r3, #2]
 8001074:	3305      	adds	r3, #5
 8001076:	4619      	mov	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	440b      	add	r3, r1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800108c:	f8a3 238c 	strh.w	r2, [r3, #908]	@ 0x38c
	trans->end = outbuf[6 + trans->length];
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	885b      	ldrh	r3, [r3, #2]
 8001094:	3306      	adds	r3, #6
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010a4:	f883 238e 	strb.w	r2, [r3, #910]	@ 0x38e
	for(int i = 0;i < trans->length;i++){
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e00d      	b.n	80010ca <Decode_frame+0xa2>
		trans->payload[i] = outbuf[i + 4];
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3304      	adds	r3, #4
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	7819      	ldrb	r1, [r3, #0]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	3304      	adds	r3, #4
 80010c0:	460a      	mov	r2, r1
 80010c2:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i < trans->length;i++){
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	885b      	ldrh	r3, [r3, #2]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4293      	cmp	r3, r2
 80010d4:	dbeb      	blt.n	80010ae <Decode_frame+0x86>
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <Decode_Payload_0x10>:
void Decode_Payload_0x10(frame_t *trans,uint32_t *val){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	*val = (trans->payload[0]<<24)|(trans->payload[1]<<16)|(trans->payload[2]<<8)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	791b      	ldrb	r3, [r3, #4]
 80010f2:	061a      	lsls	r2, r3, #24
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	795b      	ldrb	r3, [r3, #5]
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	799b      	ldrb	r3, [r3, #6]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	4313      	orrs	r3, r2
			|trans ->payload[3];
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	79d2      	ldrb	r2, [r2, #7]
 8001108:	4313      	orrs	r3, r2
 800110a:	461a      	mov	r2, r3
	*val = (trans->payload[0]<<24)|(trans->payload[1]<<16)|(trans->payload[2]<<8)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_TIM_PeriodElapsedCallback>:
//        float adc_value = get_ADC(i,trans->length/4); // Giả định hàm do đồng nghiệp bạn cung cấp
//        memcpy(&trans->payload[i * 4], &adc_value, 4); // Sao chép 4 byte của float
//    }
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 && is_transmitting == 0) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d10f      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0x30>
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0x30>
		is_transmitting = 1;  // Đánh dấu đang truyền
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, tran_data,transmit.length + 7);
 800113a:	4b08      	ldr	r3, [pc, #32]	@ (800115c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800113c:	885b      	ldrh	r3, [r3, #2]
 800113e:	3307      	adds	r3, #7
 8001140:	b29b      	uxth	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	4906      	ldr	r1, [pc, #24]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001146:	4807      	ldr	r0, [pc, #28]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001148:	f003 fb92 	bl	8004870 <HAL_UART_Transmit_DMA>
	}
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000d4 	.word	0x200000d4
 8001158:	2000295a 	.word	0x2000295a
 800115c:	20000224 	.word	0x20000224
 8001160:	200015c8 	.word	0x200015c8
 8001164:	2000011c 	.word	0x2000011c

08001168 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
	if (huart != &huart2) return;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d111      	bne.n	80011a0 <HAL_UARTEx_RxEventCallback+0x38>
	if (Size < 7) {
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	2b06      	cmp	r3, #6
 8001180:	d805      	bhi.n	800118e <HAL_UARTEx_RxEventCallback+0x26>
		// re‑arm DMA và exit
		HAL_UARTEx_ReceiveToIdle_DMA(huart, RX_data, sizeof(RX_data));
 8001182:	2214      	movs	r2, #20
 8001184:	4909      	ldr	r1, [pc, #36]	@ (80011ac <HAL_UARTEx_RxEventCallback+0x44>)
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f003 fbe2 	bl	8004950 <HAL_UARTEx_ReceiveToIdle_DMA>
		return;
 800118c:	e009      	b.n	80011a2 <HAL_UARTEx_RxEventCallback+0x3a>
	}
	flag_rx = 1;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <HAL_UARTEx_RxEventCallback+0x48>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_data, 100);
 8001194:	2264      	movs	r2, #100	@ 0x64
 8001196:	4905      	ldr	r1, [pc, #20]	@ (80011ac <HAL_UARTEx_RxEventCallback+0x44>)
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <HAL_UARTEx_RxEventCallback+0x40>)
 800119a:	f003 fbd9 	bl	8004950 <HAL_UARTEx_ReceiveToIdle_DMA>
 800119e:	e000      	b.n	80011a2 <HAL_UARTEx_RxEventCallback+0x3a>
	if (huart != &huart2) return;
 80011a0:	bf00      	nop
//	frameSize = 7 + transmit.length*4; //
//	tran_data = calloc(frameSize,sizeof(uint8_t));
//	packframe(tran_data, &transmit, 0x20);
//	HAL_TIM_Base_Start_IT(&htim2);
//	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_data, 11);
}
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000011c 	.word	0x2000011c
 80011ac:	200015b4 	.word	0x200015b4
 80011b0:	2000295b 	.word	0x2000295b

080011b4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a06      	ldr	r2, [pc, #24]	@ (80011d8 <HAL_UART_TxCpltCallback+0x24>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d102      	bne.n	80011ca <HAL_UART_TxCpltCallback+0x16>
        is_transmitting = 0;
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_UART_TxCpltCallback+0x28>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
    }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000011c 	.word	0x2000011c
 80011dc:	2000295a 	.word	0x2000295a

080011e0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <HAL_ADC_ConvCpltCallback+0x24>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d102      	bne.n	80011f6 <HAL_ADC_ConvCpltCallback+0x16>
		flag_ADC = 1;
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_ADC_ConvCpltCallback+0x28>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
	}
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2000002c 	.word	0x2000002c
 8001208:	2000295e 	.word	0x2000295e
 800120c:	00000000 	.word	0x00000000

08001210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8001216:	f000 fdf5 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121a:	f000 fa1b 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121e:	f000 fb99 	bl	8001954 <MX_GPIO_Init>
  MX_DMA_Init();
 8001222:	f000 fb59 	bl	80018d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001226:	f000 fa73 	bl	8001710 <MX_ADC1_Init>
  MX_TIM2_Init();
 800122a:	f000 fadf 	bl	80017ec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800122e:	f000 fb29 	bl	8001884 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_data, 20);
 8001232:	2214      	movs	r2, #20
 8001234:	49a4      	ldr	r1, [pc, #656]	@ (80014c8 <main+0x2b8>)
 8001236:	48a5      	ldr	r0, [pc, #660]	@ (80014cc <main+0x2bc>)
 8001238:	f003 fb8a 	bl	8004950 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADC_Start_DMA(&hadc1,adcBuffer,1);
 800123c:	2201      	movs	r2, #1
 800123e:	49a4      	ldr	r1, [pc, #656]	@ (80014d0 <main+0x2c0>)
 8001240:	48a4      	ldr	r0, [pc, #656]	@ (80014d4 <main+0x2c4>)
 8001242:	f000 ffa5 	bl	8002190 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1,adcBuffer,1);
 8001246:	2201      	movs	r2, #1
 8001248:	49a1      	ldr	r1, [pc, #644]	@ (80014d0 <main+0x2c0>)
 800124a:	48a2      	ldr	r0, [pc, #648]	@ (80014d4 <main+0x2c4>)
 800124c:	f000 ffa0 	bl	8002190 <HAL_ADC_Start_DMA>
	  if(flag_rx){
 8001250:	4ba1      	ldr	r3, [pc, #644]	@ (80014d8 <main+0x2c8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 8161 	beq.w	800151c <main+0x30c>
		  Decode_frame(RX_data, &transmit);
 800125a:	49a0      	ldr	r1, [pc, #640]	@ (80014dc <main+0x2cc>)
 800125c:	489a      	ldr	r0, [pc, #616]	@ (80014c8 <main+0x2b8>)
 800125e:	f7ff fee3 	bl	8001028 <Decode_frame>
		  switch(transmit.command){
 8001262:	4b9e      	ldr	r3, [pc, #632]	@ (80014dc <main+0x2cc>)
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	2b10      	cmp	r3, #16
 8001268:	d052      	beq.n	8001310 <main+0x100>
 800126a:	2b10      	cmp	r3, #16
 800126c:	f2c0 8153 	blt.w	8001516 <main+0x306>
 8001270:	2b40      	cmp	r3, #64	@ 0x40
 8001272:	f300 8150 	bgt.w	8001516 <main+0x306>
 8001276:	2b20      	cmp	r3, #32
 8001278:	f2c0 814d 	blt.w	8001516 <main+0x306>
 800127c:	3b20      	subs	r3, #32
 800127e:	2b20      	cmp	r3, #32
 8001280:	f200 8149 	bhi.w	8001516 <main+0x306>
 8001284:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <main+0x7c>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	0800135d 	.word	0x0800135d
 8001290:	080013ff 	.word	0x080013ff
 8001294:	08001453 	.word	0x08001453
 8001298:	08001517 	.word	0x08001517
 800129c:	08001517 	.word	0x08001517
 80012a0:	08001517 	.word	0x08001517
 80012a4:	08001517 	.word	0x08001517
 80012a8:	08001517 	.word	0x08001517
 80012ac:	08001517 	.word	0x08001517
 80012b0:	08001517 	.word	0x08001517
 80012b4:	08001517 	.word	0x08001517
 80012b8:	08001517 	.word	0x08001517
 80012bc:	08001517 	.word	0x08001517
 80012c0:	08001517 	.word	0x08001517
 80012c4:	08001517 	.word	0x08001517
 80012c8:	08001517 	.word	0x08001517
 80012cc:	080014a1 	.word	0x080014a1
 80012d0:	08001517 	.word	0x08001517
 80012d4:	08001517 	.word	0x08001517
 80012d8:	08001517 	.word	0x08001517
 80012dc:	08001517 	.word	0x08001517
 80012e0:	08001517 	.word	0x08001517
 80012e4:	08001517 	.word	0x08001517
 80012e8:	08001517 	.word	0x08001517
 80012ec:	08001517 	.word	0x08001517
 80012f0:	08001517 	.word	0x08001517
 80012f4:	08001517 	.word	0x08001517
 80012f8:	08001517 	.word	0x08001517
 80012fc:	08001517 	.word	0x08001517
 8001300:	08001517 	.word	0x08001517
 8001304:	08001517 	.word	0x08001517
 8001308:	08001517 	.word	0x08001517
 800130c:	08001511 	.word	0x08001511
		  case 0x10:
			  Decode_Payload_0x10(&transmit,&sample_time);
 8001310:	4973      	ldr	r1, [pc, #460]	@ (80014e0 <main+0x2d0>)
 8001312:	4872      	ldr	r0, [pc, #456]	@ (80014dc <main+0x2cc>)
 8001314:	f7ff fee6 	bl	80010e4 <Decode_Payload_0x10>
			  sample_number = ceil(5000.0f/sample_time);
 8001318:	4b71      	ldr	r3, [pc, #452]	@ (80014e0 <main+0x2d0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001324:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80014e4 <main+0x2d4>
 8001328:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800132c:	ee16 0a90 	vmov	r0, s13
 8001330:	f7ff f8b6 	bl	80004a0 <__aeabi_f2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	ec43 2b10 	vmov	d0, r2, r3
 800133c:	f004 fc88 	bl	8005c50 <ceil>
 8001340:	ec53 2b10 	vmov	r2, r3, d0
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fb9c 	bl	8000a84 <__aeabi_d2uiz>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b65      	ldr	r3, [pc, #404]	@ (80014e8 <main+0x2d8>)
 8001352:	801a      	strh	r2, [r3, #0]
			  sample_count = 0;
 8001354:	4b65      	ldr	r3, [pc, #404]	@ (80014ec <main+0x2dc>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
			  break;
 800135a:	e0dc      	b.n	8001516 <main+0x306>
		  case 0x20:
			  for(uint32_t i = 0; i < sample_number; i++){
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e035      	b.n	80013ce <main+0x1be>
				  FloatToBytes(save_adc[i], temp_payload);
 8001362:	4a63      	ldr	r2, [pc, #396]	@ (80014f0 <main+0x2e0>)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001372:	4860      	ldr	r0, [pc, #384]	@ (80014f4 <main+0x2e4>)
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	f7ff fe12 	bl	8000fa0 <FloatToBytes>
				  temp1 = save_adc[i]*3.3/4095;
 800137c:	4a5c      	ldr	r2, [pc, #368]	@ (80014f0 <main+0x2e0>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f869 	bl	800045c <__aeabi_ui2d>
 800138a:	a34b      	add	r3, pc, #300	@ (adr r3, 80014b8 <main+0x2a8>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f8de 	bl	8000550 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	a348      	add	r3, pc, #288	@ (adr r3, 80014c0 <main+0x2b0>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f9ff 	bl	80007a4 <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fb89 	bl	8000ac4 <__aeabi_d2f>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a50      	ldr	r2, [pc, #320]	@ (80014f8 <main+0x2e8>)
 80013b6:	6013      	str	r3, [r2, #0]
				  memcpy(&transmit.payload[i + 4],temp_payload,4);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3304      	adds	r3, #4
 80013bc:	4a47      	ldr	r2, [pc, #284]	@ (80014dc <main+0x2cc>)
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	4a4c      	ldr	r2, [pc, #304]	@ (80014f4 <main+0x2e4>)
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	601a      	str	r2, [r3, #0]
			  for(uint32_t i = 0; i < sample_number; i++){
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b46      	ldr	r3, [pc, #280]	@ (80014e8 <main+0x2d8>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d3c3      	bcc.n	8001362 <main+0x152>
			  }
			  transmit.length = sample_number * 4;
 80013da:	4b43      	ldr	r3, [pc, #268]	@ (80014e8 <main+0x2d8>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b3e      	ldr	r3, [pc, #248]	@ (80014dc <main+0x2cc>)
 80013e4:	805a      	strh	r2, [r3, #2]
			  packframe(tran_data, &transmit, 0x20);
 80013e6:	2220      	movs	r2, #32
 80013e8:	493c      	ldr	r1, [pc, #240]	@ (80014dc <main+0x2cc>)
 80013ea:	4844      	ldr	r0, [pc, #272]	@ (80014fc <main+0x2ec>)
 80013ec:	f7ff fd6f 	bl	8000ece <packframe>
			  flag_0x20 = 1 ;
 80013f0:	4b43      	ldr	r3, [pc, #268]	@ (8001500 <main+0x2f0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
			  flag_0x20_1 = 1;
 80013f6:	4b43      	ldr	r3, [pc, #268]	@ (8001504 <main+0x2f4>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
			  break;
 80013fc:	e08b      	b.n	8001516 <main+0x306>
		  case 0x21:
			  flag_0x21 = 1;
 80013fe:	4b42      	ldr	r3, [pc, #264]	@ (8001508 <main+0x2f8>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
			  for(uint32_t i = 0; i < transmit.length; i++){
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	e017      	b.n	800143a <main+0x22a>
				  FloatToBytes(save_adc[i],temp_payload);
 800140a:	4a39      	ldr	r2, [pc, #228]	@ (80014f0 <main+0x2e0>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141a:	4836      	ldr	r0, [pc, #216]	@ (80014f4 <main+0x2e4>)
 800141c:	eeb0 0a67 	vmov.f32	s0, s15
 8001420:	f7ff fdbe 	bl	8000fa0 <FloatToBytes>
				  memcpy(&transmit.payload[i + 4],temp_payload,4);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3304      	adds	r3, #4
 8001428:	4a2c      	ldr	r2, [pc, #176]	@ (80014dc <main+0x2cc>)
 800142a:	4413      	add	r3, r2
 800142c:	3304      	adds	r3, #4
 800142e:	4a31      	ldr	r2, [pc, #196]	@ (80014f4 <main+0x2e4>)
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	601a      	str	r2, [r3, #0]
			  for(uint32_t i = 0; i < transmit.length; i++){
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	3301      	adds	r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <main+0x2cc>)
 800143c:	885b      	ldrh	r3, [r3, #2]
 800143e:	461a      	mov	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4293      	cmp	r3, r2
 8001444:	d3e1      	bcc.n	800140a <main+0x1fa>
			  }
			  packframe(tran_data, &transmit, 0x20);
 8001446:	2220      	movs	r2, #32
 8001448:	4924      	ldr	r1, [pc, #144]	@ (80014dc <main+0x2cc>)
 800144a:	482c      	ldr	r0, [pc, #176]	@ (80014fc <main+0x2ec>)
 800144c:	f7ff fd3f 	bl	8000ece <packframe>

			  break;
 8001450:	e061      	b.n	8001516 <main+0x306>
		  case 0x22:
			  for(uint32_t i = 0; i < transmit.length; i++){
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	e017      	b.n	8001488 <main+0x278>
				  FloatToBytes(save_adc[i], temp_payload);
 8001458:	4a25      	ldr	r2, [pc, #148]	@ (80014f0 <main+0x2e0>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001468:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <main+0x2e4>)
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	f7ff fd97 	bl	8000fa0 <FloatToBytes>
				  memcpy(&transmit.payload[i + 4],temp_payload,4);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3304      	adds	r3, #4
 8001476:	4a19      	ldr	r2, [pc, #100]	@ (80014dc <main+0x2cc>)
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <main+0x2e4>)
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	601a      	str	r2, [r3, #0]
			  for(uint32_t i = 0; i < transmit.length; i++){
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <main+0x2cc>)
 800148a:	885b      	ldrh	r3, [r3, #2]
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4293      	cmp	r3, r2
 8001492:	d3e1      	bcc.n	8001458 <main+0x248>
			  }
			  packframe(tran_data, &transmit, 0x20);
 8001494:	2220      	movs	r2, #32
 8001496:	4911      	ldr	r1, [pc, #68]	@ (80014dc <main+0x2cc>)
 8001498:	4818      	ldr	r0, [pc, #96]	@ (80014fc <main+0x2ec>)
 800149a:	f7ff fd18 	bl	8000ece <packframe>

			  break;
 800149e:	e03a      	b.n	8001516 <main+0x306>
		  case 0x30:
			  HAL_TIM_Base_Stop_IT(&htim2);
 80014a0:	481a      	ldr	r0, [pc, #104]	@ (800150c <main+0x2fc>)
 80014a2:	f002 fddf 	bl	8004064 <HAL_TIM_Base_Stop_IT>
			  flag_0x20 = 0;
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <main+0x2f0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
			  flag_0x20_1 = 0;
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <main+0x2f4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
			  break;
 80014b2:	e030      	b.n	8001516 <main+0x306>
 80014b4:	f3af 8000 	nop.w
 80014b8:	66666666 	.word	0x66666666
 80014bc:	400a6666 	.word	0x400a6666
 80014c0:	00000000 	.word	0x00000000
 80014c4:	40affe00 	.word	0x40affe00
 80014c8:	200015b4 	.word	0x200015b4
 80014cc:	2000011c 	.word	0x2000011c
 80014d0:	20007784 	.word	0x20007784
 80014d4:	2000002c 	.word	0x2000002c
 80014d8:	2000295b 	.word	0x2000295b
 80014dc:	20000224 	.word	0x20000224
 80014e0:	20000000 	.word	0x20000000
 80014e4:	459c4000 	.word	0x459c4000
 80014e8:	2000295c 	.word	0x2000295c
 80014ec:	20007790 	.word	0x20007790
 80014f0:	20002964 	.word	0x20002964
 80014f4:	20007798 	.word	0x20007798
 80014f8:	20007794 	.word	0x20007794
 80014fc:	200015c8 	.word	0x200015c8
 8001500:	2000295f 	.word	0x2000295f
 8001504:	20007791 	.word	0x20007791
 8001508:	20002960 	.word	0x20002960
 800150c:	200000d4 	.word	0x200000d4
		  case 0x40:
			  HAL_TIM_Base_Start_IT(&htim2);		  }
 8001510:	4843      	ldr	r0, [pc, #268]	@ (8001620 <main+0x410>)
 8001512:	f002 fd45 	bl	8003fa0 <HAL_TIM_Base_Start_IT>
		  flag_rx = 0;
 8001516:	4b43      	ldr	r3, [pc, #268]	@ (8001624 <main+0x414>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]

	  }
	  if(flag_ADC == 1){
 800151c:	4b42      	ldr	r3, [pc, #264]	@ (8001628 <main+0x418>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d122      	bne.n	800156a <main+0x35a>
		  save_adc[sample_count++] = adcBuffer[0];
 8001524:	4b41      	ldr	r3, [pc, #260]	@ (800162c <main+0x41c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	b2d1      	uxtb	r1, r2
 800152c:	4a3f      	ldr	r2, [pc, #252]	@ (800162c <main+0x41c>)
 800152e:	7011      	strb	r1, [r2, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <main+0x420>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a3f      	ldr	r2, [pc, #252]	@ (8001634 <main+0x424>)
 8001538:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  if(sample_count >= sample_number && flag_0x20 == 1){
 800153c:	4b3b      	ldr	r3, [pc, #236]	@ (800162c <main+0x41c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <main+0x428>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d30c      	bcc.n	8001564 <main+0x354>
 800154a:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <main+0x42c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <main+0x354>
			  sample_count = 0;
 8001552:	4b36      	ldr	r3, [pc, #216]	@ (800162c <main+0x41c>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim2);
 8001558:	4831      	ldr	r0, [pc, #196]	@ (8001620 <main+0x410>)
 800155a:	f002 fd21 	bl	8003fa0 <HAL_TIM_Base_Start_IT>
			  flag_0x20 = 0;
 800155e:	4b37      	ldr	r3, [pc, #220]	@ (800163c <main+0x42c>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
		  }
		  flag_ADC = 0;
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <main+0x418>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
	  }
	  if(flag_0x20_1){
 800156a:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <main+0x430>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f43f ae69 	beq.w	8001246 <main+0x36>
		  for(uint32_t i = 0; i < sample_number; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	e035      	b.n	80015e6 <main+0x3d6>
		  				  FloatToBytes(save_adc[i], temp_payload);
 800157a:	4a2e      	ldr	r2, [pc, #184]	@ (8001634 <main+0x424>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158a:	482e      	ldr	r0, [pc, #184]	@ (8001644 <main+0x434>)
 800158c:	eeb0 0a67 	vmov.f32	s0, s15
 8001590:	f7ff fd06 	bl	8000fa0 <FloatToBytes>
		  				  temp1 = save_adc[i]*3.3/4095;
 8001594:	4a27      	ldr	r2, [pc, #156]	@ (8001634 <main+0x424>)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff5d 	bl	800045c <__aeabi_ui2d>
 80015a2:	a31b      	add	r3, pc, #108	@ (adr r3, 8001610 <main+0x400>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7fe ffd2 	bl	8000550 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	a318      	add	r3, pc, #96	@ (adr r3, 8001618 <main+0x408>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f8f3 	bl	80007a4 <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fa7d 	bl	8000ac4 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001648 <main+0x438>)
 80015ce:	6013      	str	r3, [r2, #0]
		  				  memcpy(&transmit.payload[i + 4],temp_payload,4);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	3304      	adds	r3, #4
 80015d4:	4a1d      	ldr	r2, [pc, #116]	@ (800164c <main+0x43c>)
 80015d6:	4413      	add	r3, r2
 80015d8:	3304      	adds	r3, #4
 80015da:	4a1a      	ldr	r2, [pc, #104]	@ (8001644 <main+0x434>)
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	601a      	str	r2, [r3, #0]
		  for(uint32_t i = 0; i < sample_number; i++){
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <main+0x428>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d3c3      	bcc.n	800157a <main+0x36a>
		  			  }
		  			  transmit.length = sample_number * 4;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <main+0x428>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <main+0x43c>)
 80015fc:	805a      	strh	r2, [r3, #2]
		  			  packframe(tran_data, &transmit, 0x20);
 80015fe:	2220      	movs	r2, #32
 8001600:	4912      	ldr	r1, [pc, #72]	@ (800164c <main+0x43c>)
 8001602:	4813      	ldr	r0, [pc, #76]	@ (8001650 <main+0x440>)
 8001604:	f7ff fc63 	bl	8000ece <packframe>
	  HAL_ADC_Start_DMA(&hadc1,adcBuffer,1);
 8001608:	e61d      	b.n	8001246 <main+0x36>
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w
 8001610:	66666666 	.word	0x66666666
 8001614:	400a6666 	.word	0x400a6666
 8001618:	00000000 	.word	0x00000000
 800161c:	40affe00 	.word	0x40affe00
 8001620:	200000d4 	.word	0x200000d4
 8001624:	2000295b 	.word	0x2000295b
 8001628:	2000295e 	.word	0x2000295e
 800162c:	20007790 	.word	0x20007790
 8001630:	20007784 	.word	0x20007784
 8001634:	20002964 	.word	0x20002964
 8001638:	2000295c 	.word	0x2000295c
 800163c:	2000295f 	.word	0x2000295f
 8001640:	20007791 	.word	0x20007791
 8001644:	20007798 	.word	0x20007798
 8001648:	20007794 	.word	0x20007794
 800164c:	20000224 	.word	0x20000224
 8001650:	200015c8 	.word	0x200015c8

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	@ 0x50
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2230      	movs	r2, #48	@ 0x30
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f004 faba 	bl	8005bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <SystemClock_Config+0xb4>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <SystemClock_Config+0xb4>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	@ 0x40
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <SystemClock_Config+0xb4>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <SystemClock_Config+0xb8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <SystemClock_Config+0xb8>)
 800169e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <SystemClock_Config+0xb8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b0:	2302      	movs	r3, #2
 80016b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b4:	2301      	movs	r3, #1
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b8:	2310      	movs	r3, #16
 80016ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016bc:	2300      	movs	r3, #0
 80016be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 ffc3 	bl	8003650 <HAL_RCC_OscConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80016d0:	f000 f968 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d4:	230f      	movs	r3, #15
 80016d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fa26 	bl	8003b40 <HAL_RCC_ClockConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016fa:	f000 f953 	bl	80019a4 <Error_Handler>
  }
}
 80016fe:	bf00      	nop
 8001700:	3750      	adds	r7, #80	@ 0x50
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000

08001710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001722:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001724:	4a2f      	ldr	r2, [pc, #188]	@ (80017e4 <MX_ADC1_Init+0xd4>)
 8001726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001728:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800172e:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001734:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001736:	2201      	movs	r2, #1
 8001738:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800173a:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 800173c:	2201      	movs	r2, #1
 800173e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001748:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 800174a:	2200      	movs	r2, #0
 800174c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800174e:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001750:	4a25      	ldr	r2, [pc, #148]	@ (80017e8 <MX_ADC1_Init+0xd8>)
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 800175c:	2203      	movs	r2, #3
 800175e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 800176a:	2201      	movs	r2, #1
 800176c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800176e:	481c      	ldr	r0, [pc, #112]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001770:	f000 fbba 	bl	8001ee8 <HAL_ADC_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 f913 	bl	80019a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001786:	2301      	movs	r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	4619      	mov	r1, r3
 800178e:	4814      	ldr	r0, [pc, #80]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 8001790:	f000 fe0c 	bl	80023ac <HAL_ADC_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800179a:	f000 f903 	bl	80019a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800179e:	2301      	movs	r3, #1
 80017a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017a2:	2302      	movs	r3, #2
 80017a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a6:	463b      	mov	r3, r7
 80017a8:	4619      	mov	r1, r3
 80017aa:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 80017ac:	f000 fdfe 	bl	80023ac <HAL_ADC_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80017b6:	f000 f8f5 	bl	80019a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017be:	2303      	movs	r3, #3
 80017c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <MX_ADC1_Init+0xd0>)
 80017c8:	f000 fdf0 	bl	80023ac <HAL_ADC_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80017d2:	f000 f8e7 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000002c 	.word	0x2000002c
 80017e4:	40012000 	.word	0x40012000
 80017e8:	0f000001 	.word	0x0f000001

080017ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001808:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <MX_TIM2_Init+0x94>)
 800180a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800180e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001810:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <MX_TIM2_Init+0x94>)
 8001812:	224f      	movs	r2, #79	@ 0x4f
 8001814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <MX_TIM2_Init+0x94>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <MX_TIM2_Init+0x94>)
 800181e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <MX_TIM2_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <MX_TIM2_Init+0x94>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001830:	4813      	ldr	r0, [pc, #76]	@ (8001880 <MX_TIM2_Init+0x94>)
 8001832:	f002 fb65 	bl	8003f00 <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800183c:	f000 f8b2 	bl	80019a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	@ (8001880 <MX_TIM2_Init+0x94>)
 800184e:	f002 fd28 	bl	80042a2 <HAL_TIM_ConfigClockSource>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001858:	f000 f8a4 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_TIM2_Init+0x94>)
 800186a:	f002 ff2f 	bl	80046cc <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001874:	f000 f896 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200000d4 	.word	0x200000d4

08001884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 800188a:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <MX_USART2_UART_Init+0x50>)
 800188c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 8001890:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 80018b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	@ (80018d0 <MX_USART2_UART_Init+0x4c>)
 80018be:	f002 ff87 	bl	80047d0 <HAL_UART_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80018c8:	f000 f86c 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000011c 	.word	0x2000011c
 80018d4:	40004400 	.word	0x40004400

080018d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <MX_DMA_Init+0x78>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001950 <MX_DMA_Init+0x78>)
 80018e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <MX_DMA_Init+0x78>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <MX_DMA_Init+0x78>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <MX_DMA_Init+0x78>)
 8001904:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_DMA_Init+0x78>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2010      	movs	r0, #16
 800191c:	f001 f8db 	bl	8002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001920:	2010      	movs	r0, #16
 8001922:	f001 f8f4 	bl	8002b0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2011      	movs	r0, #17
 800192c:	f001 f8d3 	bl	8002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001930:	2011      	movs	r0, #17
 8001932:	f001 f8ec 	bl	8002b0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2038      	movs	r0, #56	@ 0x38
 800193c:	f001 f8cb 	bl	8002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001940:	2038      	movs	r0, #56	@ 0x38
 8001942:	f001 f8e4 	bl	8002b0e <HAL_NVIC_EnableIRQ>

}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <MX_GPIO_Init+0x4c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a0f      	ldr	r2, [pc, #60]	@ (80019a0 <MX_GPIO_Init+0x4c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <MX_GPIO_Init+0x4c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MX_GPIO_Init+0x4c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <MX_GPIO_Init+0x4c>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_GPIO_Init+0x4c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <Error_Handler+0x8>

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a33      	ldr	r2, [pc, #204]	@ (8001aec <HAL_ADC_MspInit+0xec>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d15f      	bne.n	8001ae2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <HAL_ADC_MspInit+0xf0>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	4a31      	ldr	r2, [pc, #196]	@ (8001af0 <HAL_ADC_MspInit+0xf0>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a32:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <HAL_ADC_MspInit+0xf0>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <HAL_ADC_MspInit+0xf0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a2a      	ldr	r2, [pc, #168]	@ (8001af0 <HAL_ADC_MspInit+0xf0>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b28      	ldr	r3, [pc, #160]	@ (8001af0 <HAL_ADC_MspInit+0xf0>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4821      	ldr	r0, [pc, #132]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001a6e:	f001 fc6b 	bl	8003348 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a72:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001a74:	4a21      	ldr	r2, [pc, #132]	@ (8001afc <HAL_ADC_MspInit+0xfc>)
 8001a76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a84:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001a94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aa8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ab6:	4810      	ldr	r0, [pc, #64]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001ab8:	f001 f844 	bl	8002b44 <HAL_DMA_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ac2:	f7ff ff6f 	bl	80019a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001aca:	639a      	str	r2, [r3, #56]	@ 0x38
 8001acc:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2012      	movs	r0, #18
 8001ad8:	f000 fffd 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001adc:	2012      	movs	r0, #18
 8001ade:	f001 f816 	bl	8002b0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	@ 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40012000 	.word	0x40012000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	20000074 	.word	0x20000074
 8001afc:	40026410 	.word	0x40026410

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b10:	d115      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <HAL_TIM_Base_MspInit+0x48>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <HAL_TIM_Base_MspInit+0x48>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_TIM_Base_MspInit+0x48>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	201c      	movs	r0, #28
 8001b34:	f000 ffcf 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b38:	201c      	movs	r0, #28
 8001b3a:	f000 ffe8 	bl	8002b0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	@ 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	@ (8001c98 <HAL_UART_MspInit+0x14c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	f040 8090 	bne.w	8001c90 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	4b49      	ldr	r3, [pc, #292]	@ (8001c9c <HAL_UART_MspInit+0x150>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	4a48      	ldr	r2, [pc, #288]	@ (8001c9c <HAL_UART_MspInit+0x150>)
 8001b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b80:	4b46      	ldr	r3, [pc, #280]	@ (8001c9c <HAL_UART_MspInit+0x150>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	4b42      	ldr	r3, [pc, #264]	@ (8001c9c <HAL_UART_MspInit+0x150>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	4a41      	ldr	r2, [pc, #260]	@ (8001c9c <HAL_UART_MspInit+0x150>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c9c <HAL_UART_MspInit+0x150>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ba8:	2360      	movs	r3, #96	@ 0x60
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb8:	2307      	movs	r3, #7
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4837      	ldr	r0, [pc, #220]	@ (8001ca0 <HAL_UART_MspInit+0x154>)
 8001bc4:	f001 fbc0 	bl	8003348 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bc8:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001bca:	4a37      	ldr	r2, [pc, #220]	@ (8001ca8 <HAL_UART_MspInit+0x15c>)
 8001bcc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bce:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001bd0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bd4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bdc:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be2:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001be4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c08:	4826      	ldr	r0, [pc, #152]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c0a:	f000 ff9b 	bl	8002b44 <HAL_DMA_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c14:	f7ff fec6 	bl	80019a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c26:	4a22      	ldr	r2, [pc, #136]	@ (8001cb0 <HAL_UART_MspInit+0x164>)
 8001c28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c30:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c34:	2240      	movs	r2, #64	@ 0x40
 8001c36:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c58:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c64:	4811      	ldr	r0, [pc, #68]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c66:	f000 ff6d 	bl	8002b44 <HAL_DMA_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001c70:	f7ff fe98 	bl	80019a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c78:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <HAL_UART_MspInit+0x160>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2101      	movs	r1, #1
 8001c84:	2026      	movs	r0, #38	@ 0x26
 8001c86:	f000 ff26 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c8a:	2026      	movs	r0, #38	@ 0x26
 8001c8c:	f000 ff3f 	bl	8002b0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	@ 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40004400 	.word	0x40004400
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	20000164 	.word	0x20000164
 8001ca8:	40026088 	.word	0x40026088
 8001cac:	200001c4 	.word	0x200001c4
 8001cb0:	400260a0 	.word	0x400260a0

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <NMI_Handler+0x4>

08001cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <MemManage_Handler+0x4>

08001ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0a:	f000 f8cd 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <DMA1_Stream5_IRQHandler+0x10>)
 8001d1a:	f001 f8ab 	bl	8002e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000164 	.word	0x20000164

08001d28 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <DMA1_Stream6_IRQHandler+0x10>)
 8001d2e:	f001 f8a1 	bl	8002e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200001c4 	.word	0x200001c4

08001d3c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <ADC_IRQHandler+0x10>)
 8001d42:	f000 f914 	bl	8001f6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000002c 	.word	0x2000002c

08001d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM2_IRQHandler+0x10>)
 8001d56:	f002 f9b4 	bl	80040c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200000d4 	.word	0x200000d4

08001d64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <USART2_IRQHandler+0x10>)
 8001d6a:	f002 fe4f 	bl	8004a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000011c 	.word	0x2000011c

08001d78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <DMA2_Stream0_IRQHandler+0x10>)
 8001d7e:	f001 f879 	bl	8002e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000074 	.word	0x20000074

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001de8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001db4:	f7ff ffea 	bl	8001d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dde:	f003 ff05 	bl	8005bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7ff fa15 	bl	8001210 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001df4:	08005d90 	.word	0x08005d90
  ldr r2, =_sbss
 8001df8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001dfc:	200077a0 	.word	0x200077a0

08001e00 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <DMA1_Stream0_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 fe47 	bl	8002ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	200f      	movs	r0, #15
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fdba 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fe5f 	bl	8002b2a <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 fe27 	bl	8002ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	@ (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	2000779c 	.word	0x2000779c

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	2000779c 	.word	0x2000779c

08001ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e033      	b.n	8001f66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fd7a 	bl	8001a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f2e:	f023 0302 	bic.w	r3, r3, #2
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fb68 	bl	8002610 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f56:	e001      	b.n	8001f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d049      	beq.n	8002038 <HAL_ADC_IRQHandler+0xca>
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d046      	beq.n	8002038 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d12b      	bne.n	8002028 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d127      	bne.n	8002028 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d119      	bne.n	8002028 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0220 	bic.w	r2, r2, #32
 8002002:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff f8d9 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f06f 0212 	mvn.w	r2, #18
 8002036:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002046:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d057      	beq.n	80020fe <HAL_ADC_IRQHandler+0x190>
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d054      	beq.n	80020fe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d139      	bne.n	80020ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002080:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002092:	2b00      	cmp	r3, #0
 8002094:	d12b      	bne.n	80020ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d124      	bne.n	80020ee <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11d      	bne.n	80020ee <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d119      	bne.n	80020ee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020c8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fc0c 	bl	800290c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 020c 	mvn.w	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d017      	beq.n	8002144 <HAL_ADC_IRQHandler+0x1d6>
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d014      	beq.n	8002144 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d10d      	bne.n	8002144 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f925 	bl	8002384 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f06f 0201 	mvn.w	r2, #1
 8002142:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002152:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d015      	beq.n	8002186 <HAL_ADC_IRQHandler+0x218>
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d012      	beq.n	8002186 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002164:	f043 0202 	orr.w	r2, r3, #2
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0220 	mvn.w	r2, #32
 8002174:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f90e 	bl	8002398 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0220 	mvn.w	r2, #32
 8002184:	601a      	str	r2, [r3, #0]
  }
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_Start_DMA+0x1e>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e0ce      	b.n	800234c <HAL_ADC_Start_DMA+0x1bc>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d018      	beq.n	80021f6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002354 <HAL_ADC_Start_DMA+0x1c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002358 <HAL_ADC_Start_DMA+0x1c8>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9a      	lsrs	r2, r3, #18
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002204:	d107      	bne.n	8002216 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002214:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	f040 8086 	bne.w	8002332 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002250:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002264:	d106      	bne.n	8002274 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f023 0206 	bic.w	r2, r3, #6
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
 8002272:	e002      	b.n	800227a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002282:	4b36      	ldr	r3, [pc, #216]	@ (800235c <HAL_ADC_Start_DMA+0x1cc>)
 8002284:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228a:	4a35      	ldr	r2, [pc, #212]	@ (8002360 <HAL_ADC_Start_DMA+0x1d0>)
 800228c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002292:	4a34      	ldr	r2, [pc, #208]	@ (8002364 <HAL_ADC_Start_DMA+0x1d4>)
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229a:	4a33      	ldr	r2, [pc, #204]	@ (8002368 <HAL_ADC_Start_DMA+0x1d8>)
 800229c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80022b6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022c6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	334c      	adds	r3, #76	@ 0x4c
 80022d2:	4619      	mov	r1, r3
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f000 fce2 	bl	8002ca0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10f      	bne.n	8002308 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d129      	bne.n	800234a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	e020      	b.n	800234a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a17      	ldr	r2, [pc, #92]	@ (800236c <HAL_ADC_Start_DMA+0x1dc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d11b      	bne.n	800234a <HAL_ADC_Start_DMA+0x1ba>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d114      	bne.n	800234a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	e00b      	b.n	800234a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000004 	.word	0x20000004
 8002358:	431bde83 	.word	0x431bde83
 800235c:	40012300 	.word	0x40012300
 8002360:	08002809 	.word	0x08002809
 8002364:	080028c3 	.word	0x080028c3
 8002368:	080028df 	.word	0x080028df
 800236c:	40012000 	.word	0x40012000

08002370 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e113      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x244>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	d925      	bls.n	8002424 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68d9      	ldr	r1, [r3, #12]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	3b1e      	subs	r3, #30
 80023ee:	2207      	movs	r2, #7
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43da      	mvns	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68d9      	ldr	r1, [r3, #12]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	4603      	mov	r3, r0
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4403      	add	r3, r0
 8002416:	3b1e      	subs	r3, #30
 8002418:	409a      	lsls	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	e022      	b.n	800246a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	2207      	movs	r2, #7
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	400a      	ands	r2, r1
 8002446:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6919      	ldr	r1, [r3, #16]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	4603      	mov	r3, r0
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4403      	add	r3, r0
 8002460:	409a      	lsls	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b06      	cmp	r3, #6
 8002470:	d824      	bhi.n	80024bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b05      	subs	r3, #5
 8002484:	221f      	movs	r2, #31
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	400a      	ands	r2, r1
 8002492:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b05      	subs	r3, #5
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ba:	e04c      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d824      	bhi.n	800250e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	3b23      	subs	r3, #35	@ 0x23
 80024d6:	221f      	movs	r2, #31
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43da      	mvns	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	400a      	ands	r2, r1
 80024e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	3b23      	subs	r3, #35	@ 0x23
 8002500:	fa00 f203 	lsl.w	r2, r0, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
 800250c:	e023      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	3b41      	subs	r3, #65	@ 0x41
 8002520:	221f      	movs	r2, #31
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	400a      	ands	r2, r1
 800252e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	4618      	mov	r0, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3b41      	subs	r3, #65	@ 0x41
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002556:	4b29      	ldr	r3, [pc, #164]	@ (80025fc <HAL_ADC_ConfigChannel+0x250>)
 8002558:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a28      	ldr	r2, [pc, #160]	@ (8002600 <HAL_ADC_ConfigChannel+0x254>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d10f      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1d8>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b12      	cmp	r3, #18
 800256a:	d10b      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1d      	ldr	r2, [pc, #116]	@ (8002600 <HAL_ADC_ConfigChannel+0x254>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d12b      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x23a>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1c      	ldr	r2, [pc, #112]	@ (8002604 <HAL_ADC_ConfigChannel+0x258>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b11      	cmp	r3, #17
 800259e:	d122      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a11      	ldr	r2, [pc, #68]	@ (8002604 <HAL_ADC_ConfigChannel+0x258>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_ADC_ConfigChannel+0x25c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a11      	ldr	r2, [pc, #68]	@ (800260c <HAL_ADC_ConfigChannel+0x260>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	0c9a      	lsrs	r2, r3, #18
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025d8:	e002      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	3b01      	subs	r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f9      	bne.n	80025da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40012300 	.word	0x40012300
 8002600:	40012000 	.word	0x40012000
 8002604:	10000012 	.word	0x10000012
 8002608:	20000004 	.word	0x20000004
 800260c:	431bde83 	.word	0x431bde83

08002610 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002618:	4b79      	ldr	r3, [pc, #484]	@ (8002800 <ADC_Init+0x1f0>)
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	431a      	orrs	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	021a      	lsls	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a2:	4a58      	ldr	r2, [pc, #352]	@ (8002804 <ADC_Init+0x1f4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	e00f      	b.n	800270e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800270c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0202 	bic.w	r2, r2, #2
 800271c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7e1b      	ldrb	r3, [r3, #24]
 8002728:	005a      	lsls	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800274a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800275a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	3b01      	subs	r3, #1
 8002768:	035a      	lsls	r2, r3, #13
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	e007      	b.n	8002784 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002782:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	3b01      	subs	r3, #1
 80027a0:	051a      	lsls	r2, r3, #20
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027c6:	025a      	lsls	r2, r3, #9
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	029a      	lsls	r2, r3, #10
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40012300 	.word	0x40012300
 8002804:	0f000001 	.word	0x0f000001

08002808 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	d13c      	bne.n	800289c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d12b      	bne.n	8002894 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d127      	bne.n	8002894 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800285c:	2b00      	cmp	r3, #0
 800285e:	d119      	bne.n	8002894 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0220 	bic.w	r2, r2, #32
 800286e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7fe fca3 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800289a:	e00e      	b.n	80028ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff fd75 	bl	8002398 <HAL_ADC_ErrorCallback>
}
 80028ae:	e004      	b.n	80028ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff fd4d 	bl	8002370 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2240      	movs	r2, #64	@ 0x40
 80028f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff fd4a 	bl	8002398 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4907      	ldr	r1, [pc, #28]	@ (80029bc <__NVIC_EnableIRQ+0x38>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000e100 	.word	0xe000e100

080029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db0a      	blt.n	80029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	490c      	ldr	r1, [pc, #48]	@ (8002a0c <__NVIC_SetPriority+0x4c>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e8:	e00a      	b.n	8002a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4908      	ldr	r1, [pc, #32]	@ (8002a10 <__NVIC_SetPriority+0x50>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3b04      	subs	r3, #4
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	440b      	add	r3, r1
 80029fe:	761a      	strb	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000e100 	.word	0xe000e100
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	@ 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf28      	it	cs
 8002a32:	2304      	movcs	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d902      	bls.n	8002a44 <NVIC_EncodePriority+0x30>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3b03      	subs	r3, #3
 8002a42:	e000      	b.n	8002a46 <NVIC_EncodePriority+0x32>
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43d9      	mvns	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	4313      	orrs	r3, r2
         );
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a8c:	d301      	bcc.n	8002a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00f      	b.n	8002ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a92:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <SysTick_Config+0x40>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f7ff ff8e 	bl	80029c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <SysTick_Config+0x40>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aaa:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <SysTick_Config+0x40>)
 8002aac:	2207      	movs	r2, #7
 8002aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	e000e010 	.word	0xe000e010

08002ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff29 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae8:	f7ff ff3e 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7ff ff8e 	bl	8002a14 <NVIC_EncodePriority>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff5d 	bl	80029c0 <__NVIC_SetPriority>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff31 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ffa2 	bl	8002a7c <SysTick_Config>
 8002b38:	4603      	mov	r3, r0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff f9be 	bl	8001ed0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e099      	b.n	8002c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b80:	e00f      	b.n	8002ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b82:	f7ff f9a5 	bl	8001ed0 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d908      	bls.n	8002ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e078      	b.n	8002c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e8      	bne.n	8002b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4b38      	ldr	r3, [pc, #224]	@ (8002c9c <HAL_DMA_Init+0x158>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d107      	bne.n	8002c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	4313      	orrs	r3, r2
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0307 	bic.w	r3, r3, #7
 8002c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d117      	bne.n	8002c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fb01 	bl	8003250 <DMA_CheckFifoParam>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c62:	2301      	movs	r3, #1
 8002c64:	e016      	b.n	8002c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fab8 	bl	80031e4 <DMA_CalcBaseAndBitshift>
 8002c74:	4603      	mov	r3, r0
 8002c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	223f      	movs	r2, #63	@ 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	f010803f 	.word	0xf010803f

08002ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_DMA_Start_IT+0x26>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e040      	b.n	8002d48 <HAL_DMA_Start_IT+0xa8>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d12f      	bne.n	8002d3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fa4a 	bl	8003188 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	223f      	movs	r2, #63	@ 0x3f
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0216 	orr.w	r2, r2, #22
 8002d0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0208 	orr.w	r2, r2, #8
 8002d26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e005      	b.n	8002d46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
 8002d44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d5e:	f7ff f8b7 	bl	8001ed0 <HAL_GetTick>
 8002d62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d008      	beq.n	8002d82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2280      	movs	r2, #128	@ 0x80
 8002d74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e052      	b.n	8002e28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0216 	bic.w	r2, r2, #22
 8002d90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002da0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_DMA_Abort+0x62>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0208 	bic.w	r2, r2, #8
 8002dc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd2:	e013      	b.n	8002dfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd4:	f7ff f87c 	bl	8001ed0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d90c      	bls.n	8002dfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2203      	movs	r2, #3
 8002dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e015      	b.n	8002e28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e4      	bne.n	8002dd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	223f      	movs	r2, #63	@ 0x3f
 8002e10:	409a      	lsls	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d004      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00c      	b.n	8002e68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2205      	movs	r2, #5
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e80:	4b8e      	ldr	r3, [pc, #568]	@ (80030bc <HAL_DMA_IRQHandler+0x248>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a8e      	ldr	r2, [pc, #568]	@ (80030c0 <HAL_DMA_IRQHandler+0x24c>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	0a9b      	lsrs	r3, r3, #10
 8002e8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01a      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0204 	bic.w	r2, r2, #4
 8002ec6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	2208      	movs	r2, #8
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d012      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	2201      	movs	r2, #1
 8002f04:	409a      	lsls	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	f043 0202 	orr.w	r2, r3, #2
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d012      	beq.n	8002f4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f38:	2204      	movs	r2, #4
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	f043 0204 	orr.w	r2, r3, #4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f50:	2210      	movs	r2, #16
 8002f52:	409a      	lsls	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d043      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d03c      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6e:	2210      	movs	r2, #16
 8002f70:	409a      	lsls	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d018      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d108      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d024      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
 8002fa2:	e01f      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
 8002fb4:	e016      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0208 	bic.w	r2, r2, #8
 8002fd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe8:	2220      	movs	r2, #32
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 808f 	beq.w	8003114 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8087 	beq.w	8003114 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300a:	2220      	movs	r2, #32
 800300c:	409a      	lsls	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b05      	cmp	r3, #5
 800301c:	d136      	bne.n	800308c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0216 	bic.w	r2, r2, #22
 800302c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800303c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <HAL_DMA_IRQHandler+0x1da>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0208 	bic.w	r2, r2, #8
 800305c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003062:	223f      	movs	r2, #63	@ 0x3f
 8003064:	409a      	lsls	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800307e:	2b00      	cmp	r3, #0
 8003080:	d07e      	beq.n	8003180 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
        }
        return;
 800308a:	e079      	b.n	8003180 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10d      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d031      	beq.n	8003114 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
 80030b8:	e02c      	b.n	8003114 <HAL_DMA_IRQHandler+0x2a0>
 80030ba:	bf00      	nop
 80030bc:	20000004 	.word	0x20000004
 80030c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d023      	beq.n	8003114 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
 80030d4:	e01e      	b.n	8003114 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10f      	bne.n	8003104 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0210 	bic.w	r2, r2, #16
 80030f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	2b00      	cmp	r3, #0
 800311a:	d032      	beq.n	8003182 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d022      	beq.n	800316e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2205      	movs	r2, #5
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	3301      	adds	r3, #1
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	d307      	bcc.n	800315c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f2      	bne.n	8003140 <HAL_DMA_IRQHandler+0x2cc>
 800315a:	e000      	b.n	800315e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800315c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
 800317e:	e000      	b.n	8003182 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003180:	bf00      	nop
    }
  }
}
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	d108      	bne.n	80031c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031c6:	e007      	b.n	80031d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	60da      	str	r2, [r3, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3b10      	subs	r3, #16
 80031f4:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <DMA_CalcBaseAndBitshift+0x64>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031fe:	4a13      	ldr	r2, [pc, #76]	@ (800324c <DMA_CalcBaseAndBitshift+0x68>)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d909      	bls.n	8003226 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	1d1a      	adds	r2, r3, #4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	659a      	str	r2, [r3, #88]	@ 0x58
 8003224:	e007      	b.n	8003236 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	aaaaaaab 	.word	0xaaaaaaab
 800324c:	08005d78 	.word	0x08005d78

08003250 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11f      	bne.n	80032aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d856      	bhi.n	800331e <DMA_CheckFifoParam+0xce>
 8003270:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <DMA_CheckFifoParam+0x28>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	08003289 	.word	0x08003289
 800327c:	0800329b 	.word	0x0800329b
 8003280:	08003289 	.word	0x08003289
 8003284:	0800331f 	.word	0x0800331f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d046      	beq.n	8003322 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003298:	e043      	b.n	8003322 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032a2:	d140      	bne.n	8003326 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a8:	e03d      	b.n	8003326 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032b2:	d121      	bne.n	80032f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d837      	bhi.n	800332a <DMA_CheckFifoParam+0xda>
 80032ba:	a201      	add	r2, pc, #4	@ (adr r2, 80032c0 <DMA_CheckFifoParam+0x70>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	080032d1 	.word	0x080032d1
 80032c4:	080032d7 	.word	0x080032d7
 80032c8:	080032d1 	.word	0x080032d1
 80032cc:	080032e9 	.word	0x080032e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      break;
 80032d4:	e030      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d025      	beq.n	800332e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e6:	e022      	b.n	800332e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032f0:	d11f      	bne.n	8003332 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032f6:	e01c      	b.n	8003332 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d903      	bls.n	8003306 <DMA_CheckFifoParam+0xb6>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d003      	beq.n	800330c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003304:	e018      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
      break;
 800330a:	e015      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e00b      	b.n	8003336 <DMA_CheckFifoParam+0xe6>
      break;
 800331e:	bf00      	nop
 8003320:	e00a      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
      break;
 8003322:	bf00      	nop
 8003324:	e008      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
      break;
 8003326:	bf00      	nop
 8003328:	e006      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
      break;
 800332a:	bf00      	nop
 800332c:	e004      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
      break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
      break;   
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <DMA_CheckFifoParam+0xe8>
      break;
 8003336:	bf00      	nop
    }
  } 
  
  return status; 
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop

08003348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	@ 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	e159      	b.n	8003618 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003364:	2201      	movs	r2, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	429a      	cmp	r2, r3
 800337e:	f040 8148 	bne.w	8003612 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d005      	beq.n	800339a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003396:	2b02      	cmp	r3, #2
 8003398:	d130      	bne.n	80033fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 0201 	and.w	r2, r3, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b03      	cmp	r3, #3
 8003406:	d017      	beq.n	8003438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d123      	bne.n	800348c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	08da      	lsrs	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3208      	adds	r2, #8
 800344c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	08da      	lsrs	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3208      	adds	r2, #8
 8003486:	69b9      	ldr	r1, [r7, #24]
 8003488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0203 	and.w	r2, r3, #3
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80a2 	beq.w	8003612 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b57      	ldr	r3, [pc, #348]	@ (8003630 <HAL_GPIO_Init+0x2e8>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	4a56      	ldr	r2, [pc, #344]	@ (8003630 <HAL_GPIO_Init+0x2e8>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034de:	4b54      	ldr	r3, [pc, #336]	@ (8003630 <HAL_GPIO_Init+0x2e8>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ea:	4a52      	ldr	r2, [pc, #328]	@ (8003634 <HAL_GPIO_Init+0x2ec>)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a49      	ldr	r2, [pc, #292]	@ (8003638 <HAL_GPIO_Init+0x2f0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d019      	beq.n	800354a <HAL_GPIO_Init+0x202>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a48      	ldr	r2, [pc, #288]	@ (800363c <HAL_GPIO_Init+0x2f4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <HAL_GPIO_Init+0x1fe>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a47      	ldr	r2, [pc, #284]	@ (8003640 <HAL_GPIO_Init+0x2f8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00d      	beq.n	8003542 <HAL_GPIO_Init+0x1fa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a46      	ldr	r2, [pc, #280]	@ (8003644 <HAL_GPIO_Init+0x2fc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d007      	beq.n	800353e <HAL_GPIO_Init+0x1f6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a45      	ldr	r2, [pc, #276]	@ (8003648 <HAL_GPIO_Init+0x300>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_GPIO_Init+0x1f2>
 8003536:	2304      	movs	r3, #4
 8003538:	e008      	b.n	800354c <HAL_GPIO_Init+0x204>
 800353a:	2307      	movs	r3, #7
 800353c:	e006      	b.n	800354c <HAL_GPIO_Init+0x204>
 800353e:	2303      	movs	r3, #3
 8003540:	e004      	b.n	800354c <HAL_GPIO_Init+0x204>
 8003542:	2302      	movs	r3, #2
 8003544:	e002      	b.n	800354c <HAL_GPIO_Init+0x204>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_GPIO_Init+0x204>
 800354a:	2300      	movs	r3, #0
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	f002 0203 	and.w	r2, r2, #3
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	4093      	lsls	r3, r2
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800355c:	4935      	ldr	r1, [pc, #212]	@ (8003634 <HAL_GPIO_Init+0x2ec>)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <HAL_GPIO_Init+0x304>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358e:	4a2f      	ldr	r2, [pc, #188]	@ (800364c <HAL_GPIO_Init+0x304>)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003594:	4b2d      	ldr	r3, [pc, #180]	@ (800364c <HAL_GPIO_Init+0x304>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b8:	4a24      	ldr	r2, [pc, #144]	@ (800364c <HAL_GPIO_Init+0x304>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035be:	4b23      	ldr	r3, [pc, #140]	@ (800364c <HAL_GPIO_Init+0x304>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e2:	4a1a      	ldr	r2, [pc, #104]	@ (800364c <HAL_GPIO_Init+0x304>)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e8:	4b18      	ldr	r3, [pc, #96]	@ (800364c <HAL_GPIO_Init+0x304>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800360c:	4a0f      	ldr	r2, [pc, #60]	@ (800364c <HAL_GPIO_Init+0x304>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3301      	adds	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b0f      	cmp	r3, #15
 800361c:	f67f aea2 	bls.w	8003364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3724      	adds	r7, #36	@ 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40013800 	.word	0x40013800
 8003638:	40020000 	.word	0x40020000
 800363c:	40020400 	.word	0x40020400
 8003640:	40020800 	.word	0x40020800
 8003644:	40020c00 	.word	0x40020c00
 8003648:	40021000 	.word	0x40021000
 800364c:	40013c00 	.word	0x40013c00

08003650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e267      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d075      	beq.n	800375a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800366e:	4b88      	ldr	r3, [pc, #544]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d00c      	beq.n	8003694 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b85      	ldr	r3, [pc, #532]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003682:	2b08      	cmp	r3, #8
 8003684:	d112      	bne.n	80036ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003686:	4b82      	ldr	r3, [pc, #520]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003692:	d10b      	bne.n	80036ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	4b7e      	ldr	r3, [pc, #504]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05b      	beq.n	8003758 <HAL_RCC_OscConfig+0x108>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d157      	bne.n	8003758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e242      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b4:	d106      	bne.n	80036c4 <HAL_RCC_OscConfig+0x74>
 80036b6:	4b76      	ldr	r3, [pc, #472]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a75      	ldr	r2, [pc, #468]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01d      	b.n	8003700 <HAL_RCC_OscConfig+0xb0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x98>
 80036ce:	4b70      	ldr	r3, [pc, #448]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b6d      	ldr	r3, [pc, #436]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6c      	ldr	r2, [pc, #432]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0xb0>
 80036e8:	4b69      	ldr	r3, [pc, #420]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a68      	ldr	r2, [pc, #416]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b66      	ldr	r3, [pc, #408]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a65      	ldr	r2, [pc, #404]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe fbe2 	bl	8001ed0 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe fbde 	bl	8001ed0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e207      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b5b      	ldr	r3, [pc, #364]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0xc0>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fbce 	bl	8001ed0 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe fbca 	bl	8001ed0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	@ 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e1f3      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	4b51      	ldr	r3, [pc, #324]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0xe8>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d063      	beq.n	800382e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003766:	4b4a      	ldr	r3, [pc, #296]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b47      	ldr	r3, [pc, #284]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800377a:	2b08      	cmp	r3, #8
 800377c:	d11c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377e:	4b44      	ldr	r3, [pc, #272]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	4b41      	ldr	r3, [pc, #260]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_RCC_OscConfig+0x152>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e1c7      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4937      	ldr	r1, [pc, #220]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	e03a      	b.n	800382e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c0:	4b34      	ldr	r3, [pc, #208]	@ (8003894 <HAL_RCC_OscConfig+0x244>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe fb83 	bl	8001ed0 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fe fb7f 	bl	8001ed0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1a8      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b28      	ldr	r3, [pc, #160]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4925      	ldr	r1, [pc, #148]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
 8003800:	e015      	b.n	800382e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_RCC_OscConfig+0x244>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe fb62 	bl	8001ed0 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003810:	f7fe fb5e 	bl	8001ed0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e187      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d036      	beq.n	80038a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <HAL_RCC_OscConfig+0x248>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fe fb42 	bl	8001ed0 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7fe fb3e 	bl	8001ed0 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e167      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x200>
 800386e:	e01b      	b.n	80038a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003870:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_OscConfig+0x248>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003876:	f7fe fb2b 	bl	8001ed0 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	e00e      	b.n	800389c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387e:	f7fe fb27 	bl	8001ed0 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d907      	bls.n	800389c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e150      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
 8003890:	40023800 	.word	0x40023800
 8003894:	42470000 	.word	0x42470000
 8003898:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	4b88      	ldr	r3, [pc, #544]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800389e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ea      	bne.n	800387e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8097 	beq.w	80039e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b81      	ldr	r3, [pc, #516]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	4b7d      	ldr	r3, [pc, #500]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	4a7c      	ldr	r2, [pc, #496]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e6:	4b77      	ldr	r3, [pc, #476]	@ (8003ac4 <HAL_RCC_OscConfig+0x474>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f2:	4b74      	ldr	r3, [pc, #464]	@ (8003ac4 <HAL_RCC_OscConfig+0x474>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a73      	ldr	r2, [pc, #460]	@ (8003ac4 <HAL_RCC_OscConfig+0x474>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fe:	f7fe fae7 	bl	8001ed0 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003906:	f7fe fae3 	bl	8001ed0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e10c      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac4 <HAL_RCC_OscConfig+0x474>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d106      	bne.n	800393a <HAL_RCC_OscConfig+0x2ea>
 800392c:	4b64      	ldr	r3, [pc, #400]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	4a63      	ldr	r2, [pc, #396]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70
 8003938:	e01c      	b.n	8003974 <HAL_RCC_OscConfig+0x324>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x30c>
 8003942:	4b5f      	ldr	r3, [pc, #380]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	4a5e      	ldr	r2, [pc, #376]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003948:	f043 0304 	orr.w	r3, r3, #4
 800394c:	6713      	str	r3, [r2, #112]	@ 0x70
 800394e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	4a5b      	ldr	r2, [pc, #364]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6713      	str	r3, [r2, #112]	@ 0x70
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0x324>
 800395c:	4b58      	ldr	r3, [pc, #352]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003960:	4a57      	ldr	r2, [pc, #348]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6713      	str	r3, [r2, #112]	@ 0x70
 8003968:	4b55      	ldr	r3, [pc, #340]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396c:	4a54      	ldr	r2, [pc, #336]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800396e:	f023 0304 	bic.w	r3, r3, #4
 8003972:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d015      	beq.n	80039a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe faa8 	bl	8001ed0 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe faa4 	bl	8001ed0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0cb      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	4b49      	ldr	r3, [pc, #292]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ee      	beq.n	8003984 <HAL_RCC_OscConfig+0x334>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a8:	f7fe fa92 	bl	8001ed0 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fe fa8e 	bl	8001ed0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0b5      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1ee      	bne.n	80039b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d8:	4b39      	ldr	r3, [pc, #228]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	4a38      	ldr	r2, [pc, #224]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80039de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a1 	beq.w	8003b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ee:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d05c      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d141      	bne.n	8003a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a02:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <HAL_RCC_OscConfig+0x478>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fa62 	bl	8001ed0 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe fa5e 	bl	8001ed0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e087      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	4b27      	ldr	r3, [pc, #156]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	019b      	lsls	r3, r3, #6
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	3b01      	subs	r3, #1
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	491b      	ldr	r1, [pc, #108]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCC_OscConfig+0x478>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7fe fa37 	bl	8001ed0 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fe fa33 	bl	8001ed0 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e05c      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x416>
 8003a84:	e054      	b.n	8003b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <HAL_RCC_OscConfig+0x478>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fa20 	bl	8001ed0 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fe fa1c 	bl	8001ed0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e045      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x444>
 8003ab2:	e03d      	b.n	8003b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e038      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <HAL_RCC_OscConfig+0x4ec>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d028      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d121      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d11a      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d111      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800

08003b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0cc      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b54:	4b68      	ldr	r3, [pc, #416]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d90c      	bls.n	8003b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b65      	ldr	r3, [pc, #404]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b63      	ldr	r3, [pc, #396]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0b8      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b94:	4b59      	ldr	r3, [pc, #356]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a58      	ldr	r2, [pc, #352]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bac:	4b53      	ldr	r3, [pc, #332]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a52      	ldr	r2, [pc, #328]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b50      	ldr	r3, [pc, #320]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	494d      	ldr	r1, [pc, #308]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d044      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b47      	ldr	r3, [pc, #284]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d119      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e07f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e06f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e067      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b37      	ldr	r3, [pc, #220]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4934      	ldr	r1, [pc, #208]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c30:	f7fe f94e 	bl	8001ed0 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fe f94a 	bl	8001ed0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e04f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c60:	4b25      	ldr	r3, [pc, #148]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d20c      	bcs.n	8003c88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b22      	ldr	r3, [pc, #136]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b20      	ldr	r3, [pc, #128]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e032      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c94:	4b19      	ldr	r3, [pc, #100]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4916      	ldr	r1, [pc, #88]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb2:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	490e      	ldr	r1, [pc, #56]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cc6:	f000 f821 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	490a      	ldr	r1, [pc, #40]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	5ccb      	ldrb	r3, [r1, r3]
 8003cda:	fa22 f303 	lsr.w	r3, r2, r3
 8003cde:	4a09      	ldr	r2, [pc, #36]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe f8ae 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023c00 	.word	0x40023c00
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	08005d60 	.word	0x08005d60
 8003d04:	20000004 	.word	0x20000004
 8003d08:	20000008 	.word	0x20000008

08003d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b090      	sub	sp, #64	@ 0x40
 8003d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d24:	4b59      	ldr	r3, [pc, #356]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d00d      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x40>
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	f200 80a1 	bhi.w	8003e78 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d3e:	e09b      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b53      	ldr	r3, [pc, #332]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d44:	e09b      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d46:	4b53      	ldr	r3, [pc, #332]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d4a:	e098      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d56:	4b4d      	ldr	r3, [pc, #308]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d028      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d62:	4b4a      	ldr	r3, [pc, #296]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	2200      	movs	r2, #0
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d74:	2100      	movs	r1, #0
 8003d76:	4b47      	ldr	r3, [pc, #284]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d78:	fb03 f201 	mul.w	r2, r3, r1
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	fb00 f303 	mul.w	r3, r0, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	4a43      	ldr	r2, [pc, #268]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d86:	fba0 1202 	umull	r1, r2, r0, r2
 8003d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d92:	4413      	add	r3, r2
 8003d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d98:	2200      	movs	r2, #0
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	61fa      	str	r2, [r7, #28]
 8003d9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003da6:	f7fc fedd 	bl	8000b64 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4613      	mov	r3, r2
 8003db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003db2:	e053      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db4:	4b35      	ldr	r3, [pc, #212]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	2200      	movs	r2, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	617a      	str	r2, [r7, #20]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dc6:	f04f 0b00 	mov.w	fp, #0
 8003dca:	4652      	mov	r2, sl
 8003dcc:	465b      	mov	r3, fp
 8003dce:	f04f 0000 	mov.w	r0, #0
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	0159      	lsls	r1, r3, #5
 8003dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ddc:	0150      	lsls	r0, r2, #5
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	ebb2 080a 	subs.w	r8, r2, sl
 8003de6:	eb63 090b 	sbc.w	r9, r3, fp
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003df6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dfe:	ebb2 0408 	subs.w	r4, r2, r8
 8003e02:	eb63 0509 	sbc.w	r5, r3, r9
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	00eb      	lsls	r3, r5, #3
 8003e10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e14:	00e2      	lsls	r2, r4, #3
 8003e16:	4614      	mov	r4, r2
 8003e18:	461d      	mov	r5, r3
 8003e1a:	eb14 030a 	adds.w	r3, r4, sl
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	eb45 030b 	adc.w	r3, r5, fp
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e32:	4629      	mov	r1, r5
 8003e34:	028b      	lsls	r3, r1, #10
 8003e36:	4621      	mov	r1, r4
 8003e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	028a      	lsls	r2, r1, #10
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e46:	2200      	movs	r2, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	60fa      	str	r2, [r7, #12]
 8003e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e50:	f7fc fe88 	bl	8000b64 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4613      	mov	r3, r2
 8003e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	3301      	adds	r3, #1
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3740      	adds	r7, #64	@ 0x40
 8003e84:	46bd      	mov	sp, r7
 8003e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	00f42400 	.word	0x00f42400
 8003e94:	017d7840 	.word	0x017d7840

08003e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e9c:	4b03      	ldr	r3, [pc, #12]	@ (8003eac <HAL_RCC_GetHCLKFreq+0x14>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000004 	.word	0x20000004

08003eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb4:	f7ff fff0 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	0a9b      	lsrs	r3, r3, #10
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4903      	ldr	r1, [pc, #12]	@ (8003ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	08005d70 	.word	0x08005d70

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003edc:	f7ff ffdc 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0b5b      	lsrs	r3, r3, #13
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4903      	ldr	r1, [pc, #12]	@ (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	08005d70 	.word	0x08005d70

08003f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e041      	b.n	8003f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd fdea 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f000 fa9e 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d001      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e044      	b.n	8004042 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_TIM_Base_Start_IT+0xb0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d018      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe2:	d013      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8004054 <HAL_TIM_Base_Start_IT+0xb4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00e      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a19      	ldr	r2, [pc, #100]	@ (8004058 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a17      	ldr	r2, [pc, #92]	@ (800405c <HAL_TIM_Base_Start_IT+0xbc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a16      	ldr	r2, [pc, #88]	@ (8004060 <HAL_TIM_Base_Start_IT+0xc0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d111      	bne.n	8004030 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b06      	cmp	r3, #6
 800401c:	d010      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402e:	e007      	b.n	8004040 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40000c00 	.word	0x40000c00
 8004060:	40014000 	.word	0x40014000

08004064 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <HAL_TIM_Base_Stop_IT+0x48>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	f240 4344 	movw	r3, #1092	@ 0x444
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_TIM_Base_Stop_IT+0x48>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01b      	beq.n	8004126 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0202 	mvn.w	r2, #2
 80040f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f999 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 8004112:	e005      	b.n	8004120 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f98b 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f99c 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01b      	beq.n	8004172 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f06f 0204 	mvn.w	r2, #4
 8004142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f973 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 800415e:	e005      	b.n	800416c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f965 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f976 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01b      	beq.n	80041be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f06f 0208 	mvn.w	r2, #8
 800418e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2204      	movs	r2, #4
 8004194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f94d 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 80041aa:	e005      	b.n	80041b8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f93f 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f950 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01b      	beq.n	800420a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0210 	mvn.w	r2, #16
 80041da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2208      	movs	r2, #8
 80041e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f927 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 80041f6:	e005      	b.n	8004204 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f919 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f92a 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00c      	beq.n	800422e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f06f 0201 	mvn.w	r2, #1
 8004226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fc ff77 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00c      	beq.n	8004252 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800424a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fab5 	bl	80047bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00c      	beq.n	8004276 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8fb 	bl	800446c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f06f 0220 	mvn.w	r2, #32
 8004292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fa87 	bl	80047a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_TIM_ConfigClockSource+0x1c>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0b4      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x186>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f6:	d03e      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xd4>
 80042f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fc:	f200 8087 	bhi.w	800440e <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004304:	f000 8086 	beq.w	8004414 <HAL_TIM_ConfigClockSource+0x172>
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430c:	d87f      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x16c>
 800430e:	2b70      	cmp	r3, #112	@ 0x70
 8004310:	d01a      	beq.n	8004348 <HAL_TIM_ConfigClockSource+0xa6>
 8004312:	2b70      	cmp	r3, #112	@ 0x70
 8004314:	d87b      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x16c>
 8004316:	2b60      	cmp	r3, #96	@ 0x60
 8004318:	d050      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x11a>
 800431a:	2b60      	cmp	r3, #96	@ 0x60
 800431c:	d877      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x16c>
 800431e:	2b50      	cmp	r3, #80	@ 0x50
 8004320:	d03c      	beq.n	800439c <HAL_TIM_ConfigClockSource+0xfa>
 8004322:	2b50      	cmp	r3, #80	@ 0x50
 8004324:	d873      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x16c>
 8004326:	2b40      	cmp	r3, #64	@ 0x40
 8004328:	d058      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0x13a>
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d86f      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x16c>
 800432e:	2b30      	cmp	r3, #48	@ 0x30
 8004330:	d064      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x15a>
 8004332:	2b30      	cmp	r3, #48	@ 0x30
 8004334:	d86b      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x16c>
 8004336:	2b20      	cmp	r3, #32
 8004338:	d060      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x15a>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d867      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x16c>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d05c      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x15a>
 8004342:	2b10      	cmp	r3, #16
 8004344:	d05a      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x15a>
 8004346:	e062      	b.n	800440e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004358:	f000 f998 	bl	800468c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800436a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
      break;
 8004374:	e04f      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	f000 f981 	bl	800468c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004398:	609a      	str	r2, [r3, #8]
      break;
 800439a:	e03c      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a8:	461a      	mov	r2, r3
 80043aa:	f000 f8f5 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2150      	movs	r1, #80	@ 0x50
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f94e 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80043ba:	e02c      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c8:	461a      	mov	r2, r3
 80043ca:	f000 f914 	bl	80045f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2160      	movs	r1, #96	@ 0x60
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f93e 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80043da:	e01c      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e8:	461a      	mov	r2, r3
 80043ea:	f000 f8d5 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2140      	movs	r1, #64	@ 0x40
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 f92e 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80043fa:	e00c      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 f925 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 800440c:	e003      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
      break;
 8004412:	e000      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004414:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3a      	ldr	r2, [pc, #232]	@ (800457c <TIM_Base_SetConfig+0xfc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00f      	beq.n	80044b8 <TIM_Base_SetConfig+0x38>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449e:	d00b      	beq.n	80044b8 <TIM_Base_SetConfig+0x38>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a37      	ldr	r2, [pc, #220]	@ (8004580 <TIM_Base_SetConfig+0x100>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_Base_SetConfig+0x38>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a36      	ldr	r2, [pc, #216]	@ (8004584 <TIM_Base_SetConfig+0x104>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_Base_SetConfig+0x38>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a35      	ldr	r2, [pc, #212]	@ (8004588 <TIM_Base_SetConfig+0x108>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d108      	bne.n	80044ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2b      	ldr	r2, [pc, #172]	@ (800457c <TIM_Base_SetConfig+0xfc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01b      	beq.n	800450a <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d8:	d017      	beq.n	800450a <TIM_Base_SetConfig+0x8a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a28      	ldr	r2, [pc, #160]	@ (8004580 <TIM_Base_SetConfig+0x100>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <TIM_Base_SetConfig+0x8a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a27      	ldr	r2, [pc, #156]	@ (8004584 <TIM_Base_SetConfig+0x104>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00f      	beq.n	800450a <TIM_Base_SetConfig+0x8a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a26      	ldr	r2, [pc, #152]	@ (8004588 <TIM_Base_SetConfig+0x108>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00b      	beq.n	800450a <TIM_Base_SetConfig+0x8a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a25      	ldr	r2, [pc, #148]	@ (800458c <TIM_Base_SetConfig+0x10c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <TIM_Base_SetConfig+0x8a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a24      	ldr	r2, [pc, #144]	@ (8004590 <TIM_Base_SetConfig+0x110>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_Base_SetConfig+0x8a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <TIM_Base_SetConfig+0x114>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d108      	bne.n	800451c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0e      	ldr	r2, [pc, #56]	@ (800457c <TIM_Base_SetConfig+0xfc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d103      	bne.n	8004550 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f023 0201 	bic.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	611a      	str	r2, [r3, #16]
  }
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800

08004598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 030a 	bic.w	r3, r3, #10
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b087      	sub	sp, #28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0210 	bic.w	r2, r3, #16
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004632:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	f043 0307 	orr.w	r3, r3, #7
 8004678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	609a      	str	r2, [r3, #8]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	021a      	lsls	r2, r3, #8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e050      	b.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004730:	d013      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a16      	ldr	r2, [pc, #88]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a15      	ldr	r2, [pc, #84]	@ (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a13      	ldr	r2, [pc, #76]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d10c      	bne.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40014000 	.word	0x40014000

080047a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e042      	b.n	8004868 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd f9a8 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	@ 0x24
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 ff6d 	bl	80056f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08c      	sub	sp, #48	@ 0x30
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b20      	cmp	r3, #32
 8004888:	d156      	bne.n	8004938 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_UART_Transmit_DMA+0x26>
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e04f      	b.n	800493a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2221      	movs	r2, #33	@ 0x21
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048be:	4a21      	ldr	r2, [pc, #132]	@ (8004944 <HAL_UART_Transmit_DMA+0xd4>)
 80048c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	4a20      	ldr	r2, [pc, #128]	@ (8004948 <HAL_UART_Transmit_DMA+0xd8>)
 80048c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	4a1f      	ldr	r2, [pc, #124]	@ (800494c <HAL_UART_Transmit_DMA+0xdc>)
 80048d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d6:	2200      	movs	r2, #0
 80048d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80048da:	f107 0308 	add.w	r3, r7, #8
 80048de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3304      	adds	r3, #4
 80048ee:	461a      	mov	r2, r3
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	f7fe f9d5 	bl	8002ca0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	617b      	str	r3, [r7, #20]
   return(result);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004920:	627a      	str	r2, [r7, #36]	@ 0x24
 8004922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6a39      	ldr	r1, [r7, #32]
 8004926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	61fb      	str	r3, [r7, #28]
   return(result);
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e000      	b.n	800493a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3730      	adds	r7, #48	@ 0x30
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	08004f81 	.word	0x08004f81
 8004948:	0800501b 	.word	0x0800501b
 800494c:	0800519f 	.word	0x0800519f

08004950 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08c      	sub	sp, #48	@ 0x30
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b20      	cmp	r3, #32
 8004968:	d14a      	bne.n	8004a00 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e043      	b.n	8004a02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	461a      	mov	r2, r3
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 fc51 	bl	8005234 <UART_Start_Receive_DMA>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800499c:	2b00      	cmp	r3, #0
 800499e:	d12c      	bne.n	80049fa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d125      	bne.n	80049f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	617b      	str	r3, [r7, #20]
   return(result);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f043 0310 	orr.w	r3, r3, #16
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049de:	627a      	str	r2, [r7, #36]	@ 0x24
 80049e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6a39      	ldr	r1, [r7, #32]
 80049e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e5      	bne.n	80049be <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80049f2:	e002      	b.n	80049fa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80049fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80049fe:	e000      	b.n	8004a02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
  }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3730      	adds	r7, #48	@ 0x30
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b0ba      	sub	sp, #232	@ 0xe8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_UART_IRQHandler+0x66>
 8004a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fd83 	bl	8005576 <UART_Receive_IT>
      return;
 8004a70:	e25b      	b.n	8004f2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80de 	beq.w	8004c38 <HAL_UART_IRQHandler+0x22c>
 8004a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80d1 	beq.w	8004c38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_UART_IRQHandler+0xae>
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <HAL_UART_IRQHandler+0xd2>
 8004ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	f043 0202 	orr.w	r2, r3, #2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_UART_IRQHandler+0xf6>
 8004aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	f043 0204 	orr.w	r2, r3, #4
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d011      	beq.n	8004b32 <HAL_UART_IRQHandler+0x126>
 8004b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	f043 0208 	orr.w	r2, r3, #8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 81f2 	beq.w	8004f20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_UART_IRQHandler+0x14e>
 8004b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fd0e 	bl	8005576 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <HAL_UART_IRQHandler+0x17a>
 8004b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04f      	beq.n	8004c26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fc16 	bl	80053b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b96:	2b40      	cmp	r3, #64	@ 0x40
 8004b98:	d141      	bne.n	8004c1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1d9      	bne.n	8004b9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d013      	beq.n	8004c16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8004dec <HAL_UART_IRQHandler+0x3e0>)
 8004bf4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe f918 	bl	8002e30 <HAL_DMA_Abort_IT>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c10:	4610      	mov	r0, r2
 8004c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	e00e      	b.n	8004c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f9a8 	bl	8004f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	e00a      	b.n	8004c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f9a4 	bl	8004f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e006      	b.n	8004c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f9a0 	bl	8004f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c32:	e175      	b.n	8004f20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	bf00      	nop
    return;
 8004c36:	e173      	b.n	8004f20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 814f 	bne.w	8004ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8148 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8141 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7e:	2b40      	cmp	r3, #64	@ 0x40
 8004c80:	f040 80b6 	bne.w	8004df0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8145 	beq.w	8004f24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	f080 813e 	bcs.w	8004f24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cba:	f000 8088 	beq.w	8004dce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1d9      	bne.n	8004cbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e1      	bne.n	8004d0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3314      	adds	r3, #20
 8004d66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e3      	bne.n	8004d46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d9e:	f023 0310 	bic.w	r3, r3, #16
 8004da2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004db0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004db2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004db6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e3      	bne.n	8004d8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fd ffc1 	bl	8002d50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fc f9bf 	bl	8001168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dea:	e09b      	b.n	8004f24 <HAL_UART_IRQHandler+0x518>
 8004dec:	0800547f 	.word	0x0800547f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 808e 	beq.w	8004f28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8089 	beq.w	8004f28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e3      	bne.n	8004e16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3314      	adds	r3, #20
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e72:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004eb8:	61fa      	str	r2, [r7, #28]
 8004eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	69b9      	ldr	r1, [r7, #24]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e3      	bne.n	8004e94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fc f945 	bl	8001168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ede:	e023      	b.n	8004f28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_UART_IRQHandler+0x4f4>
 8004eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fad4 	bl	80054a6 <UART_Transmit_IT>
    return;
 8004efe:	e014      	b.n	8004f2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00e      	beq.n	8004f2a <HAL_UART_IRQHandler+0x51e>
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fb14 	bl	8005546 <UART_EndTransmit_IT>
    return;
 8004f1e:	e004      	b.n	8004f2a <HAL_UART_IRQHandler+0x51e>
    return;
 8004f20:	bf00      	nop
 8004f22:	e002      	b.n	8004f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f24:	bf00      	nop
 8004f26:	e000      	b.n	8004f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f28:	bf00      	nop
  }
}
 8004f2a:	37e8      	adds	r7, #232	@ 0xe8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b090      	sub	sp, #64	@ 0x40
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d137      	bne.n	800500c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3314      	adds	r3, #20
 8004fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e5      	bne.n	8004fa2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ff6:	61fa      	str	r2, [r7, #28]
 8004ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	69b9      	ldr	r1, [r7, #24]
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	617b      	str	r3, [r7, #20]
   return(result);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e5      	bne.n	8004fd6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800500a:	e002      	b.n	8005012 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800500c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800500e:	f7fc f8d1 	bl	80011b4 <HAL_UART_TxCpltCallback>
}
 8005012:	bf00      	nop
 8005014:	3740      	adds	r7, #64	@ 0x40
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005026:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ff81 	bl	8004f30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b09c      	sub	sp, #112	@ 0x70
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005042:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d172      	bne.n	8005138 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005054:	2200      	movs	r2, #0
 8005056:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800506a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800506e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005078:	65ba      	str	r2, [r7, #88]	@ 0x58
 800507a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800507e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800509c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80050a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050ac:	647a      	str	r2, [r7, #68]	@ 0x44
 80050ae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e5      	bne.n	800508c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	623b      	str	r3, [r7, #32]
   return(result);
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80050d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3314      	adds	r3, #20
 80050de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80050e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005100:	2b01      	cmp	r3, #1
 8005102:	d119      	bne.n	8005138 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	60fb      	str	r3, [r7, #12]
   return(result);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0310 	bic.w	r3, r3, #16
 800511a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800511c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005124:	61fa      	str	r2, [r7, #28]
 8005126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	69b9      	ldr	r1, [r7, #24]
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	617b      	str	r3, [r7, #20]
   return(result);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800513a:	2200      	movs	r2, #0
 800513c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	2b01      	cmp	r3, #1
 8005144:	d106      	bne.n	8005154 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005148:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800514a:	4619      	mov	r1, r3
 800514c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800514e:	f7fc f80b 	bl	8001168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005152:	e002      	b.n	800515a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005154:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005156:	f7ff fef5 	bl	8004f44 <HAL_UART_RxCpltCallback>
}
 800515a:	bf00      	nop
 800515c:	3770      	adds	r7, #112	@ 0x70
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	2b01      	cmp	r3, #1
 800517c:	d108      	bne.n	8005190 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	b29b      	uxth	r3, r3
 8005186:	4619      	mov	r1, r3
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7fb ffed 	bl	8001168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800518e:	e002      	b.n	8005196 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff fee1 	bl	8004f58 <HAL_UART_RxHalfCpltCallback>
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ba:	2b80      	cmp	r3, #128	@ 0x80
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b21      	cmp	r3, #33	@ 0x21
 80051d0:	d108      	bne.n	80051e4 <UART_DMAError+0x46>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80051de:	68b8      	ldr	r0, [r7, #8]
 80051e0:	f000 f8c2 	bl	8005368 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ee:	2b40      	cmp	r3, #64	@ 0x40
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b22      	cmp	r3, #34	@ 0x22
 8005204:	d108      	bne.n	8005218 <UART_DMAError+0x7a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f000 f8d0 	bl	80053b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521c:	f043 0210 	orr.w	r2, r3, #16
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	f7ff fea1 	bl	8004f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b098      	sub	sp, #96	@ 0x60
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2222      	movs	r2, #34	@ 0x22
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005260:	4a3e      	ldr	r2, [pc, #248]	@ (800535c <UART_Start_Receive_DMA+0x128>)
 8005262:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005268:	4a3d      	ldr	r2, [pc, #244]	@ (8005360 <UART_Start_Receive_DMA+0x12c>)
 800526a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005270:	4a3c      	ldr	r2, [pc, #240]	@ (8005364 <UART_Start_Receive_DMA+0x130>)
 8005272:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005278:	2200      	movs	r2, #0
 800527a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	f7fd fd04 	bl	8002ca0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d019      	beq.n	80052ea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	330c      	adds	r3, #12
 80052bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80052d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80052dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80052e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e5      	bne.n	80052b6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3314      	adds	r3, #20
 80052f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	657b      	str	r3, [r7, #84]	@ 0x54
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800530a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	617b      	str	r3, [r7, #20]
   return(result);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005334:	653b      	str	r3, [r7, #80]	@ 0x50
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800533e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6a39      	ldr	r1, [r7, #32]
 8005344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	61fb      	str	r3, [r7, #28]
   return(result);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3760      	adds	r7, #96	@ 0x60
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	08005037 	.word	0x08005037
 8005360:	08005163 	.word	0x08005163
 8005364:	0800519f 	.word	0x0800519f

08005368 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	@ 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	61ba      	str	r2, [r7, #24]
 8005392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6979      	ldr	r1, [r7, #20]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	613b      	str	r3, [r7, #16]
   return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80053ac:	bf00      	nop
 80053ae:	3724      	adds	r7, #36	@ 0x24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b095      	sub	sp, #84	@ 0x54
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80053e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e5      	bne.n	80053c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	61fb      	str	r3, [r7, #28]
   return(result);
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3314      	adds	r3, #20
 8005412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800541a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e5      	bne.n	80053f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	d119      	bne.n	8005464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f023 0310 	bic.w	r3, r3, #16
 8005446:	647b      	str	r3, [r7, #68]	@ 0x44
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005450:	61ba      	str	r2, [r7, #24]
 8005452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6979      	ldr	r1, [r7, #20]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	613b      	str	r3, [r7, #16]
   return(result);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005472:	bf00      	nop
 8005474:	3754      	adds	r7, #84	@ 0x54
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7ff fd67 	bl	8004f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b21      	cmp	r3, #33	@ 0x21
 80054b8:	d13e      	bne.n	8005538 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c2:	d114      	bne.n	80054ee <UART_Transmit_IT+0x48>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d110      	bne.n	80054ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	621a      	str	r2, [r3, #32]
 80054ec:	e008      	b.n	8005500 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	1c59      	adds	r1, r3, #1
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6211      	str	r1, [r2, #32]
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29b      	uxth	r3, r3
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4619      	mov	r1, r3
 800550e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10f      	bne.n	8005534 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005522:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005532:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	e000      	b.n	800553a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800555c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fb fe24 	bl	80011b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b08c      	sub	sp, #48	@ 0x30
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b22      	cmp	r3, #34	@ 0x22
 8005588:	f040 80ae 	bne.w	80056e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005594:	d117      	bne.n	80055c6 <UART_Receive_IT+0x50>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d113      	bne.n	80055c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055be:	1c9a      	adds	r2, r3, #2
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80055c4:	e026      	b.n	8005614 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d8:	d007      	beq.n	80055ea <UART_Receive_IT+0x74>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <UART_Receive_IT+0x82>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	e008      	b.n	800560a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005604:	b2da      	uxtb	r2, r3
 8005606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005608:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29b      	uxth	r3, r3
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4619      	mov	r1, r3
 8005622:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005624:	2b00      	cmp	r3, #0
 8005626:	d15d      	bne.n	80056e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0220 	bic.w	r2, r2, #32
 8005636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	2b01      	cmp	r3, #1
 800566c:	d135      	bne.n	80056da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	613b      	str	r3, [r7, #16]
   return(result);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005694:	623a      	str	r2, [r7, #32]
 8005696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	69f9      	ldr	r1, [r7, #28]
 800569a:	6a3a      	ldr	r2, [r7, #32]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e5      	bne.n	8005674 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d10a      	bne.n	80056cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb fd48 	bl	8001168 <HAL_UARTEx_RxEventCallback>
 80056d8:	e002      	b.n	80056e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fc32 	bl	8004f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e002      	b.n	80056ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3730      	adds	r7, #48	@ 0x30
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f8:	b0c0      	sub	sp, #256	@ 0x100
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	ea40 0301 	orr.w	r3, r0, r1
 800571c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	431a      	orrs	r2, r3
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	431a      	orrs	r2, r3
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800574c:	f021 010c 	bic.w	r1, r1, #12
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800575a:	430b      	orrs	r3, r1
 800575c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576e:	6999      	ldr	r1, [r3, #24]
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	ea40 0301 	orr.w	r3, r0, r1
 800577a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b8f      	ldr	r3, [pc, #572]	@ (80059c0 <UART_SetConfig+0x2cc>)
 8005784:	429a      	cmp	r2, r3
 8005786:	d005      	beq.n	8005794 <UART_SetConfig+0xa0>
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b8d      	ldr	r3, [pc, #564]	@ (80059c4 <UART_SetConfig+0x2d0>)
 8005790:	429a      	cmp	r2, r3
 8005792:	d104      	bne.n	800579e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7fe fba0 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8005798:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800579c:	e003      	b.n	80057a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fe fb87 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 80057a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b0:	f040 810c 	bne.w	80059cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057c6:	4622      	mov	r2, r4
 80057c8:	462b      	mov	r3, r5
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057ce:	415b      	adcs	r3, r3
 80057d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057d6:	4621      	mov	r1, r4
 80057d8:	eb12 0801 	adds.w	r8, r2, r1
 80057dc:	4629      	mov	r1, r5
 80057de:	eb43 0901 	adc.w	r9, r3, r1
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057f6:	4690      	mov	r8, r2
 80057f8:	4699      	mov	r9, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	eb18 0303 	adds.w	r3, r8, r3
 8005800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005804:	462b      	mov	r3, r5
 8005806:	eb49 0303 	adc.w	r3, r9, r3
 800580a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800581a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800581e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005822:	460b      	mov	r3, r1
 8005824:	18db      	adds	r3, r3, r3
 8005826:	653b      	str	r3, [r7, #80]	@ 0x50
 8005828:	4613      	mov	r3, r2
 800582a:	eb42 0303 	adc.w	r3, r2, r3
 800582e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005838:	f7fb f994 	bl	8000b64 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4b61      	ldr	r3, [pc, #388]	@ (80059c8 <UART_SetConfig+0x2d4>)
 8005842:	fba3 2302 	umull	r2, r3, r3, r2
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	011c      	lsls	r4, r3, #4
 800584a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005854:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	1891      	adds	r1, r2, r2
 8005862:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005864:	415b      	adcs	r3, r3
 8005866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800586c:	4641      	mov	r1, r8
 800586e:	eb12 0a01 	adds.w	sl, r2, r1
 8005872:	4649      	mov	r1, r9
 8005874:	eb43 0b01 	adc.w	fp, r3, r1
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800588c:	4692      	mov	sl, r2
 800588e:	469b      	mov	fp, r3
 8005890:	4643      	mov	r3, r8
 8005892:	eb1a 0303 	adds.w	r3, sl, r3
 8005896:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800589a:	464b      	mov	r3, r9
 800589c:	eb4b 0303 	adc.w	r3, fp, r3
 80058a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058b8:	460b      	mov	r3, r1
 80058ba:	18db      	adds	r3, r3, r3
 80058bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80058be:	4613      	mov	r3, r2
 80058c0:	eb42 0303 	adc.w	r3, r2, r3
 80058c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058ce:	f7fb f949 	bl	8000b64 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	4b3b      	ldr	r3, [pc, #236]	@ (80059c8 <UART_SetConfig+0x2d4>)
 80058da:	fba3 2301 	umull	r2, r3, r3, r1
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	2264      	movs	r2, #100	@ 0x64
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	1acb      	subs	r3, r1, r3
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058ee:	4b36      	ldr	r3, [pc, #216]	@ (80059c8 <UART_SetConfig+0x2d4>)
 80058f0:	fba3 2302 	umull	r2, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058fc:	441c      	add	r4, r3
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005902:	2200      	movs	r2, #0
 8005904:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005908:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800590c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	1891      	adds	r1, r2, r2
 8005916:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005918:	415b      	adcs	r3, r3
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800591c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005920:	4641      	mov	r1, r8
 8005922:	1851      	adds	r1, r2, r1
 8005924:	6339      	str	r1, [r7, #48]	@ 0x30
 8005926:	4649      	mov	r1, r9
 8005928:	414b      	adcs	r3, r1
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005938:	4659      	mov	r1, fp
 800593a:	00cb      	lsls	r3, r1, #3
 800593c:	4651      	mov	r1, sl
 800593e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005942:	4651      	mov	r1, sl
 8005944:	00ca      	lsls	r2, r1, #3
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	4603      	mov	r3, r0
 800594c:	4642      	mov	r2, r8
 800594e:	189b      	adds	r3, r3, r2
 8005950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005954:	464b      	mov	r3, r9
 8005956:	460a      	mov	r2, r1
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800596c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005974:	460b      	mov	r3, r1
 8005976:	18db      	adds	r3, r3, r3
 8005978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800597a:	4613      	mov	r3, r2
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800598a:	f7fb f8eb 	bl	8000b64 <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <UART_SetConfig+0x2d4>)
 8005994:	fba3 1302 	umull	r1, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	2164      	movs	r1, #100	@ 0x64
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	3332      	adds	r3, #50	@ 0x32
 80059a6:	4a08      	ldr	r2, [pc, #32]	@ (80059c8 <UART_SetConfig+0x2d4>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	f003 0207 	and.w	r2, r3, #7
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4422      	add	r2, r4
 80059ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059bc:	e106      	b.n	8005bcc <UART_SetConfig+0x4d8>
 80059be:	bf00      	nop
 80059c0:	40011000 	.word	0x40011000
 80059c4:	40011400 	.word	0x40011400
 80059c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059de:	4642      	mov	r2, r8
 80059e0:	464b      	mov	r3, r9
 80059e2:	1891      	adds	r1, r2, r2
 80059e4:	6239      	str	r1, [r7, #32]
 80059e6:	415b      	adcs	r3, r3
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ee:	4641      	mov	r1, r8
 80059f0:	1854      	adds	r4, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb43 0501 	adc.w	r5, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	00eb      	lsls	r3, r5, #3
 8005a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a06:	00e2      	lsls	r2, r4, #3
 8005a08:	4614      	mov	r4, r2
 8005a0a:	461d      	mov	r5, r3
 8005a0c:	4643      	mov	r3, r8
 8005a0e:	18e3      	adds	r3, r4, r3
 8005a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a14:	464b      	mov	r3, r9
 8005a16:	eb45 0303 	adc.w	r3, r5, r3
 8005a1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	008b      	lsls	r3, r1, #2
 8005a3e:	4621      	mov	r1, r4
 8005a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a44:	4621      	mov	r1, r4
 8005a46:	008a      	lsls	r2, r1, #2
 8005a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a4c:	f7fb f88a 	bl	8000b64 <__aeabi_uldivmod>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4b60      	ldr	r3, [pc, #384]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005a56:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	011c      	lsls	r4, r3, #4
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	61b9      	str	r1, [r7, #24]
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a80:	4641      	mov	r1, r8
 8005a82:	1851      	adds	r1, r2, r1
 8005a84:	6139      	str	r1, [r7, #16]
 8005a86:	4649      	mov	r1, r9
 8005a88:	414b      	adcs	r3, r1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a98:	4659      	mov	r1, fp
 8005a9a:	00cb      	lsls	r3, r1, #3
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	00ca      	lsls	r2, r1, #3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4642      	mov	r2, r8
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ad8:	4649      	mov	r1, r9
 8005ada:	008b      	lsls	r3, r1, #2
 8005adc:	4641      	mov	r1, r8
 8005ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	008a      	lsls	r2, r1, #2
 8005ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005aea:	f7fb f83b 	bl	8000b64 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	4b38      	ldr	r3, [pc, #224]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005af6:	fba3 2301 	umull	r2, r3, r3, r1
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	2264      	movs	r2, #100	@ 0x64
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	1acb      	subs	r3, r1, r3
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	3332      	adds	r3, #50	@ 0x32
 8005b08:	4a33      	ldr	r2, [pc, #204]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b14:	441c      	add	r4, r3
 8005b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b24:	4642      	mov	r2, r8
 8005b26:	464b      	mov	r3, r9
 8005b28:	1891      	adds	r1, r2, r2
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	415b      	adcs	r3, r3
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b34:	4641      	mov	r1, r8
 8005b36:	1851      	adds	r1, r2, r1
 8005b38:	6039      	str	r1, [r7, #0]
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	414b      	adcs	r3, r1
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b4c:	4659      	mov	r1, fp
 8005b4e:	00cb      	lsls	r3, r1, #3
 8005b50:	4651      	mov	r1, sl
 8005b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b56:	4651      	mov	r1, sl
 8005b58:	00ca      	lsls	r2, r1, #3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4642      	mov	r2, r8
 8005b62:	189b      	adds	r3, r3, r2
 8005b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b66:	464b      	mov	r3, r9
 8005b68:	460a      	mov	r2, r1
 8005b6a:	eb42 0303 	adc.w	r3, r2, r3
 8005b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b88:	4649      	mov	r1, r9
 8005b8a:	008b      	lsls	r3, r1, #2
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b92:	4641      	mov	r1, r8
 8005b94:	008a      	lsls	r2, r1, #2
 8005b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b9a:	f7fa ffe3 	bl	8000b64 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	2164      	movs	r1, #100	@ 0x64
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	3332      	adds	r3, #50	@ 0x32
 8005bb6:	4a08      	ldr	r2, [pc, #32]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f003 020f 	and.w	r2, r3, #15
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4422      	add	r2, r4
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd8:	51eb851f 	.word	0x51eb851f

08005bdc <memset>:
 8005bdc:	4402      	add	r2, r0
 8005bde:	4603      	mov	r3, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d100      	bne.n	8005be6 <memset+0xa>
 8005be4:	4770      	bx	lr
 8005be6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bea:	e7f9      	b.n	8005be0 <memset+0x4>

08005bec <__libc_init_array>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4d0d      	ldr	r5, [pc, #52]	@ (8005c24 <__libc_init_array+0x38>)
 8005bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8005c28 <__libc_init_array+0x3c>)
 8005bf2:	1b64      	subs	r4, r4, r5
 8005bf4:	10a4      	asrs	r4, r4, #2
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	42a6      	cmp	r6, r4
 8005bfa:	d109      	bne.n	8005c10 <__libc_init_array+0x24>
 8005bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8005c2c <__libc_init_array+0x40>)
 8005bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8005c30 <__libc_init_array+0x44>)
 8005c00:	f000 f8a2 	bl	8005d48 <_init>
 8005c04:	1b64      	subs	r4, r4, r5
 8005c06:	10a4      	asrs	r4, r4, #2
 8005c08:	2600      	movs	r6, #0
 8005c0a:	42a6      	cmp	r6, r4
 8005c0c:	d105      	bne.n	8005c1a <__libc_init_array+0x2e>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c14:	4798      	blx	r3
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7ee      	b.n	8005bf8 <__libc_init_array+0xc>
 8005c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1e:	4798      	blx	r3
 8005c20:	3601      	adds	r6, #1
 8005c22:	e7f2      	b.n	8005c0a <__libc_init_array+0x1e>
 8005c24:	08005d88 	.word	0x08005d88
 8005c28:	08005d88 	.word	0x08005d88
 8005c2c:	08005d88 	.word	0x08005d88
 8005c30:	08005d8c 	.word	0x08005d8c

08005c34 <memcpy>:
 8005c34:	440a      	add	r2, r1
 8005c36:	4291      	cmp	r1, r2
 8005c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c3c:	d100      	bne.n	8005c40 <memcpy+0xc>
 8005c3e:	4770      	bx	lr
 8005c40:	b510      	push	{r4, lr}
 8005c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c4a:	4291      	cmp	r1, r2
 8005c4c:	d1f9      	bne.n	8005c42 <memcpy+0xe>
 8005c4e:	bd10      	pop	{r4, pc}

08005c50 <ceil>:
 8005c50:	ec51 0b10 	vmov	r0, r1, d0
 8005c54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005c60:	2e13      	cmp	r6, #19
 8005c62:	460c      	mov	r4, r1
 8005c64:	4605      	mov	r5, r0
 8005c66:	4680      	mov	r8, r0
 8005c68:	dc2e      	bgt.n	8005cc8 <ceil+0x78>
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	da11      	bge.n	8005c92 <ceil+0x42>
 8005c6e:	a332      	add	r3, pc, #200	@ (adr r3, 8005d38 <ceil+0xe8>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f7fa fab6 	bl	80001e4 <__adddf3>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f7fa fef8 	bl	8000a70 <__aeabi_dcmpgt>
 8005c80:	b120      	cbz	r0, 8005c8c <ceil+0x3c>
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	db4f      	blt.n	8005d26 <ceil+0xd6>
 8005c86:	4325      	orrs	r5, r4
 8005c88:	d151      	bne.n	8005d2e <ceil+0xde>
 8005c8a:	462c      	mov	r4, r5
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	e023      	b.n	8005cda <ceil+0x8a>
 8005c92:	4f2b      	ldr	r7, [pc, #172]	@ (8005d40 <ceil+0xf0>)
 8005c94:	4137      	asrs	r7, r6
 8005c96:	ea01 0307 	and.w	r3, r1, r7
 8005c9a:	4303      	orrs	r3, r0
 8005c9c:	d01d      	beq.n	8005cda <ceil+0x8a>
 8005c9e:	a326      	add	r3, pc, #152	@ (adr r3, 8005d38 <ceil+0xe8>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f7fa fa9e 	bl	80001e4 <__adddf3>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2300      	movs	r3, #0
 8005cac:	f7fa fee0 	bl	8000a70 <__aeabi_dcmpgt>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d0eb      	beq.n	8005c8c <ceil+0x3c>
 8005cb4:	2c00      	cmp	r4, #0
 8005cb6:	bfc2      	ittt	gt
 8005cb8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8005cbc:	4133      	asrgt	r3, r6
 8005cbe:	18e4      	addgt	r4, r4, r3
 8005cc0:	ea24 0407 	bic.w	r4, r4, r7
 8005cc4:	2500      	movs	r5, #0
 8005cc6:	e7e1      	b.n	8005c8c <ceil+0x3c>
 8005cc8:	2e33      	cmp	r6, #51	@ 0x33
 8005cca:	dd0a      	ble.n	8005ce2 <ceil+0x92>
 8005ccc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005cd0:	d103      	bne.n	8005cda <ceil+0x8a>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	f7fa fa85 	bl	80001e4 <__adddf3>
 8005cda:	ec41 0b10 	vmov	d0, r0, r1
 8005cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005ce6:	f04f 37ff 	mov.w	r7, #4294967295
 8005cea:	40df      	lsrs	r7, r3
 8005cec:	4238      	tst	r0, r7
 8005cee:	d0f4      	beq.n	8005cda <ceil+0x8a>
 8005cf0:	a311      	add	r3, pc, #68	@ (adr r3, 8005d38 <ceil+0xe8>)
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f7fa fa75 	bl	80001e4 <__adddf3>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f7fa feb7 	bl	8000a70 <__aeabi_dcmpgt>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d0c2      	beq.n	8005c8c <ceil+0x3c>
 8005d06:	2c00      	cmp	r4, #0
 8005d08:	dd0a      	ble.n	8005d20 <ceil+0xd0>
 8005d0a:	2e14      	cmp	r6, #20
 8005d0c:	d101      	bne.n	8005d12 <ceil+0xc2>
 8005d0e:	3401      	adds	r4, #1
 8005d10:	e006      	b.n	8005d20 <ceil+0xd0>
 8005d12:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005d16:	2301      	movs	r3, #1
 8005d18:	40b3      	lsls	r3, r6
 8005d1a:	441d      	add	r5, r3
 8005d1c:	45a8      	cmp	r8, r5
 8005d1e:	d8f6      	bhi.n	8005d0e <ceil+0xbe>
 8005d20:	ea25 0507 	bic.w	r5, r5, r7
 8005d24:	e7b2      	b.n	8005c8c <ceil+0x3c>
 8005d26:	2500      	movs	r5, #0
 8005d28:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005d2c:	e7ae      	b.n	8005c8c <ceil+0x3c>
 8005d2e:	4c05      	ldr	r4, [pc, #20]	@ (8005d44 <ceil+0xf4>)
 8005d30:	2500      	movs	r5, #0
 8005d32:	e7ab      	b.n	8005c8c <ceil+0x3c>
 8005d34:	f3af 8000 	nop.w
 8005d38:	8800759c 	.word	0x8800759c
 8005d3c:	7e37e43c 	.word	0x7e37e43c
 8005d40:	000fffff 	.word	0x000fffff
 8005d44:	3ff00000 	.word	0x3ff00000

08005d48 <_init>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr

08005d54 <_fini>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	bf00      	nop
 8005d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5a:	bc08      	pop	{r3}
 8005d5c:	469e      	mov	lr, r3
 8005d5e:	4770      	bx	lr
